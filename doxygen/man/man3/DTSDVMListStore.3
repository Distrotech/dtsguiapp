.TH "DTSDVMListStore" 3 "Fri Oct 11 2013" "Version 0.00" "DTS Application wxWidgets GUI Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DTSDVMListStore \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DTSListView\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDTSDVMListStore\fP (\fBDTSDVMListStore\fP *\fBparent\fP, bool \fBis_container\fP, const wxString &\fBtitle\fP, int \fBnodeid\fP=-1, \fBdtsgui_treeviewpanel_cb\fP \fBp_cb\fP=NULL, void *userdata=NULL)"
.br
.ti -1c
.RI "\fB~DTSDVMListStore\fP ()"
.br
.ti -1c
.RI "bool \fBIsContainer\fP () const "
.br
.ti -1c
.RI "\fBDTSDVMListStore\fP * \fBGetParent\fP ()"
.br
.ti -1c
.RI "const wxString \fBGetParentTitle\fP ()"
.br
.ti -1c
.RI "size_t \fBGetChildCount\fP ()"
.br
.ti -1c
.RI "void \fBAppend\fP (\fBDTSDVMListStore\fP *child)"
.br
.ti -1c
.RI "void \fBInsert\fP (\fBDTSDVMListStore\fP *child, size_t idx)"
.br
.ti -1c
.RI "\fBDTSDVMListStore\fP * \fBGetNthChild\fP (size_t idx)"
.br
.ti -1c
.RI "size_t \fBGetChildIndex\fP (\fBDTSDVMListStore\fP *child)"
.br
.ti -1c
.RI "void \fBRemoveChildReference\fP (\fBDTSDVMListStore\fP *child)"
.br
.ti -1c
.RI "const wxString \fBGetTitle\fP ()"
.br
.ti -1c
.RI "void \fBSetTitle\fP (const wxString &value)"
.br
.ti -1c
.RI "void \fBSortChildren\fP ()"
.br
.ti -1c
.RI "void \fBSetExpanded\fP (bool \fBexpanded\fP=true)"
.br
.ti -1c
.RI "unsigned int \fBGetChildren\fP (wxDataViewItemArray &items)"
.br
.ti -1c
.RI "unsigned int \fBGetContainers\fP (wxDataViewItemArray &items, bool exonly=false)"
.br
.ti -1c
.RI "bool \fBIsExpanded\fP ()"
.br
.ti -1c
.RI "bool \fBMoveChildUp\fP (size_t idx)"
.br
.ti -1c
.RI "bool \fBMoveChildDown\fP (size_t idx)"
.br
.ti -1c
.RI "void * \fBGetUserData\fP ()"
.br
.ti -1c
.RI "int \fBGetNodeID\fP ()"
.br
.ti -1c
.RI "void \fBSetXMLData\fP (struct xml_node *xnode, const char *\fBtattr\fP)"
.br
.ti -1c
.RI "struct xml_node * \fBGetXMLData\fP (char **buff)"
.br
.ti -1c
.RI "void \fBConfigPanel\fP (\fBdtsgui_pane\fP p, \fBdtsgui_treeview\fP tw)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBcmp_title\fP (\fBDTSDVMListStore\fP *c1, \fBDTSDVMListStore\fP *c2)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBcan_edit\fP"
.br
.ti -1c
.RI "bool \fBcan_sort\fP"
.br
.ti -1c
.RI "bool \fBcan_delete\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBDTSDVMListStore\fP * > \fBchildren\fP"
.br
.ti -1c
.RI "\fBdtsgui_treeviewpanel_cb\fP \fBp_cb\fP"
.br
.ti -1c
.RI "\fBDTSDVMListStore\fP * \fBparent\fP"
.br
.ti -1c
.RI "struct xml_node * \fBxml\fP"
.br
.ti -1c
.RI "const char * \fBtattr\fP"
.br
.ti -1c
.RI "bool \fBis_container\fP"
.br
.ti -1c
.RI "wxString \fBtitle\fP"
.br
.ti -1c
.RI "bool \fBexpanded\fP"
.br
.ti -1c
.RI "void * \fBdata\fP"
.br
.ti -1c
.RI "int \fBnodeid\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 25 of file DTSListView\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "DTSDVMListStore::DTSDVMListStore (\fBDTSDVMListStore\fP *parent, boolis_container, const wxString &title, intnodeid = \fC-1\fP, \fBdtsgui_treeviewpanel_cb\fPp_cb = \fCNULL\fP, void *userdata = \fCNULL\fP)"

.PP
Definition at line 47 of file DTSListView\&.cpp\&.
.PP
References data, is_container, nodeid, p_cb, parent, tattr, title, and xml\&.
.PP
.nf
                                                                                                                                                            {
    xml = NULL;
    tattr = NULL;
    this->parent = parent;
    this->title = title;
    this->is_container = is_container;
    this->nodeid = nodeid;
    this->p_cb = p_cb;
    if (userdata && objref(userdata)) {
        this->data = userdata;
    } else {
        this->data = NULL;
    }
}
.fi
.SS "DTSDVMListStore::~DTSDVMListStore ()"

.PP
Definition at line 62 of file DTSListView\&.cpp\&.
.PP
References children, data, tattr, and xml\&.
.PP
.nf
                                  {
    while (!children\&.empty()) {
        DTSDVMListStore* f_child = children\&.back();
        delete f_child;
        children\&.pop_back();
    }
    if (data) {
        objunref(data);
    }
    if (xml) {
        objunref(xml);
    }
    if (tattr) {
        free((void*)tattr);
    }
}
.fi
.SH "Member Function Documentation"
.PP 
.SS "void DTSDVMListStore::Append (\fBDTSDVMListStore\fP *child)"

.PP
Definition at line 96 of file DTSListView\&.cpp\&.
.PP
References children\&.
.PP
Referenced by DTSDVMCtrl::AppendNode()\&.
.PP
.nf
                                                   {
    children\&.push_back(child);
}
.fi
.SS "bool DTSDVMListStore::cmp_title (\fBDTSDVMListStore\fP *c1, \fBDTSDVMListStore\fP *c2)\fC [static]\fP"

.PP
Definition at line 38 of file DTSListView\&.cpp\&.
.PP
References GetTitle()\&.
.PP
Referenced by SortChildren()\&.
.PP
.nf
                                                                       {
    wxString s1, s2;

    s1 = c1->GetTitle();
    s2 = c2->GetTitle();

    return (s1 < s2);
}
.fi
.SS "void DTSDVMListStore::ConfigPanel (\fBdtsgui_pane\fPp, \fBdtsgui_treeview\fPtw)"

.PP
Definition at line 240 of file DTSListView\&.cpp\&.
.PP
References data, and p_cb\&.
.PP
Referenced by DTSTreeWindowEvent::TreeCallback()\&.
.PP
.nf
                                                                   {
    if (!p_cb) {
        return;
    }
    p_cb(p, tw, this, data);
}
.fi
.SS "size_t DTSDVMListStore::GetChildCount ()"

.PP
Definition at line 92 of file DTSListView\&.cpp\&.
.PP
References children\&.
.PP
Referenced by DTSDVMListView::GetChildCount()\&.
.PP
.nf
                                      {
    return children\&.size();
}
.fi
.SS "size_t DTSDVMListStore::GetChildIndex (\fBDTSDVMListStore\fP *child)"

.PP
Definition at line 118 of file DTSListView\&.cpp\&.
.PP
References children\&.
.PP
Referenced by DTSDVMListView::MoveChildDown(), DTSDVMListView::MoveChildUp(), and RemoveChildReference()\&.
.PP
.nf
                                                            {
    size_t idx = 0, c_cnt;

    c_cnt = children\&.size();
    while ((idx < c_cnt) && (children[idx] != child)) {
        idx++;
    }

    return (children[idx] = child) ? idx : -1;
}
.fi
.SS "unsigned int DTSDVMListStore::GetChildren (wxDataViewItemArray &items)"

.PP
Definition at line 154 of file DTSListView\&.cpp\&.
.PP
References children\&.
.PP
Referenced by DTSDVMListView::GetChildren()\&.
.PP
.nf
                                                                    {
    unsigned int cnt;
    size_t acnt;

    acnt = children\&.size();
    for(cnt=0; cnt < acnt;cnt++) {
        items\&.Add(wxDataViewItem((void*)children[cnt]));
    }
    return cnt;
}
.fi
.SS "unsigned int DTSDVMListStore::GetContainers (wxDataViewItemArray &items, boolexonly = \fCfalse\fP)"

.PP
Definition at line 165 of file DTSListView\&.cpp\&.
.PP
References children, expanded, and is_container\&.
.PP
Referenced by DTSDVMListView::GetContainers()\&.
.PP
.nf
                                                                                   {
    unsigned int cnt;
    size_t acnt, ccnt = 0;
    wxString s;

    acnt = children\&.size();
    for(cnt=0; cnt < acnt;cnt++) {
        if (children[cnt]->is_container && (!exonly || (exonly && children[cnt]->expanded))) {
            items\&.Add(wxDataViewItem((void*)children[cnt]));
            ccnt++;
        }
    }
    return ccnt;
}
.fi
.SS "int DTSDVMListStore::GetNodeID ()"

.PP
Definition at line 215 of file DTSListView\&.cpp\&.
.PP
References nodeid\&.
.PP
Referenced by DTS_C_API::dtsgui_treenodeid(), and DTSDVMListView::GetNodeID()\&.
.PP
.nf
                               {
    return nodeid;
}
.fi
.SS "\fBDTSDVMListStore\fP * DTSDVMListStore::GetNthChild (size_tidx)"

.PP
Definition at line 110 of file DTSListView\&.cpp\&.
.PP
References children\&.
.PP
Referenced by DTSDVMListView::GetNthChild()\&.
.PP
.nf
                                                        {
    if (idx >= children\&.size()) {
        return NULL;
    }

    return children[idx];
}
.fi
.SS "\fBDTSDVMListStore\fP * DTSDVMListStore::GetParent ()"

.PP
Definition at line 83 of file DTSListView\&.cpp\&.
.PP
References parent\&.
.PP
Referenced by DTSDVMListView::Delete(), DTSDVMListView::GetParent(), GetParentTitle(), DTSDVMListView::MoveChildDown(), and DTSDVMListView::MoveChildUp()\&.
.PP
.nf
                                            {
    return parent;
}
.fi
.SS "const wxString DTSDVMListStore::GetParentTitle ()"

.PP
Definition at line 87 of file DTSListView\&.cpp\&.
.PP
References GetParent(), GetTitle(), and parent\&.
.PP
Referenced by DTS_C_API::dtsgui_treenodeparent()\&.
.PP
.nf
                                               {
    DTSDVMListStore *parent = this->GetParent();
    return (parent) ? parent->GetTitle() : '';
}
.fi
.SS "const wxString DTSDVMListStore::GetTitle ()"

.PP
Definition at line 138 of file DTSListView\&.cpp\&.
.PP
References title\&.
.PP
Referenced by cmp_title(), GetParentTitle(), DTSDVMListView::GetTitle(), DTSDVMListView::GetValue(), DTSTreeWindowEvent::TreeCallback(), and DTSTreeWindowEvent::TreeEvent()\&.
.PP
.nf
                                         {
    return (const wxString)title;
}
.fi
.SS "void * DTSDVMListStore::GetUserData (void)"

.PP
Definition at line 208 of file DTSListView\&.cpp\&.
.PP
References data\&.
.PP
Referenced by DTS_C_API::dtsgui_treenodegetdata(), and DTSDVMListView::GetUserData()\&.
.PP
.nf
                                   {
    if (data && objref(data)) {
        return data;
    }
    return NULL;
}
.fi
.SS "struct xml_node * DTSDVMListStore::GetXMLData (char **buff)\fC [read]\fP"

.PP
Definition at line 228 of file DTSListView\&.cpp\&.
.PP
References tattr, and xml\&.
.PP
Referenced by DTSDVMListView::Delete(), DTS_C_API::dtsgui_treenodegetxml(), and DTSDVMListView::GetXMLData()\&.
.PP
.nf
                                                        {
    struct xml_node *xn = NULL;

    if (xml && objref(xml)) {
        xn = xml;
    }
    if (buff && tattr) {
        *buff = (char*)objchar(tattr);
    }
    return xn;
}
.fi
.SS "void DTSDVMListStore::Insert (\fBDTSDVMListStore\fP *child, size_tidx)"

.PP
Definition at line 100 of file DTSListView\&.cpp\&.
.PP
References children\&.
.PP
.nf
                                                               {
    std::vector<DTSDVMListStore*>::iterator iter = children\&.begin();

    if (idx >= children\&.size()) {
        return;
    }

    children\&.insert(iter+idx, child);
}
.fi
.SS "bool DTSDVMListStore::IsContainer () const"

.PP
Definition at line 79 of file DTSListView\&.cpp\&.
.PP
References is_container\&.
.PP
Referenced by DTSDVMListView::IsContainer(), and DTSTreeWindowEvent::TreeEvent()\&.
.PP
.nf
                                        {
    return is_container;
}
.fi
.SS "bool DTSDVMListStore::IsExpanded ()"

.PP
Definition at line 180 of file DTSListView\&.cpp\&.
.PP
References expanded\&.
.PP
Referenced by DTSTreeWindowEvent::SortParent()\&.
.PP
.nf
                                 {
    return expanded;
}
.fi
.SS "bool DTSDVMListStore::MoveChildDown (size_tidx)"

.PP
Definition at line 196 of file DTSListView\&.cpp\&.
.PP
References children\&.
.PP
Referenced by DTSDVMListView::MoveChildDown()\&.
.PP
.nf
                                              {
    DTSDVMListStore *tmp;

    if ((idx < 0) || (idx > children\&.size()-1)) {
        return false;
    }
    tmp = children[idx];
    children[idx]=children[idx+1];
    children[idx+1]=tmp;
    return true;
}
.fi
.SS "bool DTSDVMListStore::MoveChildUp (size_tidx)"

.PP
Definition at line 184 of file DTSListView\&.cpp\&.
.PP
References children\&.
.PP
Referenced by DTSDVMListView::MoveChildUp()\&.
.PP
.nf
                                            {
    DTSDVMListStore *tmp;

    if ((idx <= 0) || (idx > children\&.size())) {
        return false;
    }
    tmp = children[idx-1];
    children[idx-1]=children[idx];
    children[idx]=tmp;
    return true;
}
.fi
.SS "void DTSDVMListStore::RemoveChildReference (\fBDTSDVMListStore\fP *child)"

.PP
Definition at line 129 of file DTSListView\&.cpp\&.
.PP
References children, and GetChildIndex()\&.
.PP
Referenced by DTSDVMListView::Delete()\&.
.PP
.nf
                                                                 {
    std::vector<DTSDVMListStore*>::iterator iter = children\&.begin();
    size_t idx;

    if ((idx = GetChildIndex(child)) >= 0) {
        children\&.erase(iter+idx);
    }
}
.fi
.SS "void DTSDVMListStore::SetExpanded (boolexpanded = \fCtrue\fP)"

.PP
Definition at line 150 of file DTSListView\&.cpp\&.
.PP
References expanded\&.
.PP
Referenced by DTSDVMListView::SetExpanded(), and DTSTreeWindowEvent::SortParent()\&.
.PP
.nf
                                               {
    this->expanded = expanded;
}
.fi
.SS "void DTSDVMListStore::SetTitle (const wxString &value)"

.PP
Definition at line 142 of file DTSListView\&.cpp\&.
.PP
References title\&.
.PP
Referenced by DTSDVMListView::SetValue()\&.
.PP
.nf
                                                    {
    title = value;
}
.fi
.SS "void DTSDVMListStore::SetXMLData (struct xml_node *xnode, const char *tattr)"

.PP
Definition at line 219 of file DTSListView\&.cpp\&.
.PP
References xml\&.
.PP
Referenced by DTS_C_API::dtsgui_treenodesetxml(), tree_newnode::handle_newtreenode(), and DTSDVMListView::SetXMLData()\&.
.PP
.nf
                                                                          {
    if (xnode && objref(xnode)) {
        this->xml = xnode;
    }
    if (tattr) {
        this->tattr = strdup(tattr);
    }
}
.fi
.SS "void DTSDVMListStore::SortChildren ()"

.PP
Definition at line 146 of file DTSListView\&.cpp\&.
.PP
References children, and cmp_title()\&.
.PP
Referenced by DTSDVMListView::SortChildren()\&.
.PP
.nf
                                   {
    std::sort(children\&.begin(), children\&.end(), cmp_title);
}
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool DTSDVMListStore::can_delete"

.PP
Definition at line 50 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMCtrl::AppendNode(), and DTSTreeWindowEvent::TreeEvent()\&.
.SS "bool DTSDVMListStore::can_edit"

.PP
Definition at line 48 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMCtrl::AppendNode(), and DTSTreeWindowEvent::TreeEvent()\&.
.SS "bool DTSDVMListStore::can_sort"

.PP
Definition at line 49 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMCtrl::AppendNode(), and DTSTreeWindowEvent::TreeEvent()\&.
.SS "std::vector<\fBDTSDVMListStore\fP*> DTSDVMListStore::children\fC [private]\fP"

.PP
Definition at line 57 of file DTSListView\&.h\&.
.PP
Referenced by Append(), GetChildCount(), GetChildIndex(), GetChildren(), GetContainers(), GetNthChild(), Insert(), MoveChildDown(), MoveChildUp(), RemoveChildReference(), SortChildren(), and ~DTSDVMListStore()\&.
.SS "void* DTSDVMListStore::data\fC [private]\fP"

.PP
Definition at line 65 of file DTSListView\&.h\&.
.PP
Referenced by ConfigPanel(), DTSDVMListStore(), GetUserData(), and ~DTSDVMListStore()\&.
.SS "bool DTSDVMListStore::expanded\fC [private]\fP"

.PP
Definition at line 64 of file DTSListView\&.h\&.
.PP
Referenced by GetContainers(), IsExpanded(), and SetExpanded()\&.
.SS "bool DTSDVMListStore::is_container\fC [private]\fP"

.PP
Definition at line 62 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMListStore(), GetContainers(), and IsContainer()\&.
.SS "int DTSDVMListStore::nodeid\fC [private]\fP"

.PP
Definition at line 66 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMListStore(), and GetNodeID()\&.
.SS "\fBdtsgui_treeviewpanel_cb\fP DTSDVMListStore::p_cb\fC [private]\fP"

.PP
Definition at line 58 of file DTSListView\&.h\&.
.PP
Referenced by ConfigPanel(), and DTSDVMListStore()\&.
.SS "\fBDTSDVMListStore\fP* DTSDVMListStore::parent\fC [private]\fP"

.PP
Definition at line 59 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMListStore(), GetParent(), and GetParentTitle()\&.
.SS "const char* DTSDVMListStore::tattr\fC [private]\fP"

.PP
Definition at line 61 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMListStore(), GetXMLData(), and ~DTSDVMListStore()\&.
.SS "wxString DTSDVMListStore::title\fC [private]\fP"

.PP
Definition at line 63 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMListStore(), GetTitle(), and SetTitle()\&.
.SS "struct xml_node* DTSDVMListStore::xml\fC [private]\fP"

.PP
Definition at line 60 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMListStore(), GetXMLData(), SetXMLData(), and ~DTSDVMListStore()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for DTS Application wxWidgets GUI Library from the source code\&.
