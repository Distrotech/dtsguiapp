.TH "Tree view panel interface." 3 "Fri Oct 11 2013" "Version 0.00" "DTS Application wxWidgets GUI Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Tree view panel interface. \- 
.PP
A tree view is a split window with a tree in the left window and display area on right\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBdtsgui_pane\fP \fBDTS_C_API::dtsgui_treepane\fP (\fBdtsgui_treeview\fP tv, const char *name, int butmask, void *userdata, struct xml_doc *xmldoc)"
.br
.RI "\fICreate a panel owned by the tree\&. \fP"
.ti -1c
.RI "\fBdtsgui_pane\fP \fBDTS_C_API::dtsgui_treepane_default\fP (\fBdtsgui_treeview\fP tv, \fBdtsgui_treenode\fP node)"
.br
.RI "\fICreate a panel owned by the tree configured from the specified node\&. \fP"
.ti -1c
.RI "\fBdtsgui_treenode\fP \fBDTS_C_API::dtsgui_treecont\fP (\fBdtsgui_treeview\fP tree, \fBdtsgui_treenode\fP node, const char *title, int can_edit, int can_sort, int can_del, int nodeid, \fBdtsgui_treeviewpanel_cb\fP p_cb, void *data)"
.br
.RI "\fICreate a container in the tree view\&. \fP"
.ti -1c
.RI "\fBdtsgui_treenode\fP \fBDTS_C_API::dtsgui_treeitem\fP (\fBdtsgui_treeview\fP tree, \fBdtsgui_treenode\fP node, const char *title, int can_edit, int can_sort, int can_del, int nodeid, \fBdtsgui_treeviewpanel_cb\fP p_cb, void *data)"
.br
.RI "\fICreate a item in a container in the tree view\&. \fP"
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_newxmltreenode\fP (\fBdtsgui_treeview\fP tree, \fBdtsgui_pane\fP p, \fBdtsgui_treenode\fP tn, const char *xpath, const char *node, const char *vitem, const char *tattr, int nid, int flags, \fBdtsgui_xmltreenode_cb\fP node_cb, void *data, \fBdtsgui_treeviewpanel_cb\fP p_cb)"
.br
.RI "\fIHelper function to handle 'Adding' a new node from a existing node\&. \fP"
.ti -1c
.RI "int \fBDTS_C_API::dtsgui_treenodeid\fP (\fBdtsgui_treenode\fP tn)"
.br
.RI "\fIGet the node id of a tree node\&. \fP"
.ti -1c
.RI "const char * \fBDTS_C_API::dtsgui_treenodeparent\fP (\fBdtsgui_treenode\fP tn)"
.br
.RI "\fIGet the name of the nodes parent\&. \fP"
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_treenodesetxml\fP (\fBdtsgui_treenode\fP tn, struct xml_node *xn, const char *tattr)"
.br
.RI "\fIAdd a XML node to the tree node\&. \fP"
.ti -1c
.RI "struct xml_node * \fBDTS_C_API::dtsgui_treenodegetxml\fP (\fBdtsgui_treenode\fP tn, char **buf)"
.br
.RI "\fIReturn the XML node reference held by the tree node\&. \fP"
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_nodesetxml\fP (\fBdtsgui_treeview\fP tree, \fBdtsgui_treenode\fP node, const char *newname)"
.br
.RI "\fIUpdate the XML Node or title attribute with a new name\&. \fP"
.ti -1c
.RI "void * \fBDTS_C_API::dtsgui_treenodegetdata\fP (\fBdtsgui_treenode\fP tn)"
.br
.RI "\fIGet reference for the user data of node\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A tree view is a split window with a tree in the left window and display area on right\&. 

\fBRemarks:\fP
.RS 4
The tree can contain branches (folder containers) and leaf nodes each node when clicked will create and place a panel in the display area\&. 
.PP
The tree window supports sorting and deletion via a menu displayed when right clicking\&. 
.RE
.PP
\fBTodo\fP
.RS 4
Allow for the deletion of branch/container/folder nodes\&. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void DTS_C_API::dtsgui_newxmltreenode (\fBdtsgui_treeview\fPtree, \fBdtsgui_pane\fPp, \fBdtsgui_treenode\fPtn, const char *xpath, const char *node, const char *vitem, const char *tattr, intnid, intflags, \fBdtsgui_xmltreenode_cb\fPnode_cb, void *data, \fBdtsgui_treeviewpanel_cb\fPp_cb)"

.PP
Helper function to handle 'Adding' a new node from a existing node\&. This implements the concept of the New button a new node will be created from the data filled in on the pane this callback is attached too\&. A new XML node is created and the panel created from this node\&.
.PP
\fBSee Also:\fP
.RS 4
\fBtree_newnode_flags\fP
.RE
.PP
\fBNote:\fP
.RS 4
this callback helper is rather complex\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fItree\fP Tree view the new panel will be added too\&. 
.br
\fIp\fP The panel this callback is attached too\&. 
.br
\fItn\fP Root treenode to add too\&. 
.br
\fIxpath\fP the path of the new node\&. 
.br
\fInode\fP the name of the XML node to create in the xpath\&. 
.br
\fIvitem\fP the item in the panel to be used to create the value of the new node\&. 
.br
\fItattr\fP the attribute to be used too create the title in the new pane\&. 
.br
\fInid\fP Node id for newly created node\&. 
.br
\fIflags\fP Option flags combined from tree_newnode_flags\&. 
.br
\fInode_cb\fP Callback called to configure the node\&. 
.br
\fIdata\fP Referenced Object passed to the callbacks\&. 
.br
\fIp_cb\fP Callback called to configure the panel when it is selected\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Nothing is returned the callback is registered on the panel\&. 
.RE
.PP

.PP
Definition at line 762 of file wrapper\&.cpp\&.
.PP
References tree_newnode::handle_newtreenode_cb(), and tree_newnode::tree_newnode()\&.
.PP
Referenced by network_adsl_link_new(), network_adsl_user_new(), network_config_dns_domain_new(), network_config_dns_domain_server_new(), network_config_dns_host_new(), network_newiface(), network_newroute(), network_newwan(), network_newwifi(), and network_tos_new()\&.
.PP
.nf
                                                                                                                         {
    class tree_newnode *nn = new tree_newnode(tree, tn, xpath, node, vitem, tattr, nid, flags, node_cb, data, p_cb);
    static_cast<DTSPanel*>(p)->SetEventCallback(&tree_newnode::handle_newtreenode_cb, nn, true);
}
.fi
.SS "void DTS_C_API::dtsgui_nodesetxml (\fBdtsgui_treeview\fPtree, \fBdtsgui_treenode\fPnode, const char *newname)"

.PP
Update the XML Node or title attribute with a new name\&. This helper function will update the node's XML after a edit event\&.
.PP
\fBSee Also:\fP
.RS 4
\fBDTSTreeWindow::UpdateNodeXML()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fItree\fP Treeview node is part of\&. 
.br
\fInode\fP TreeNode to update\&. 
.br
\fInewname\fP Name to update XML node with\&. 
.RE
.PP

.PP
Definition at line 825 of file wrapper\&.cpp\&.
.PP
References DTSTreeWindow::UpdateNodeXML()\&.
.PP
.nf
                                                                                        {
    DTSTreeWindow *tw = (DTSTreeWindow*)tree;
    tw->UpdateNodeXML(wxDataViewItem(node), newname);
}
.fi
.SS "\fBdtsgui_treenode\fP DTS_C_API::dtsgui_treecont (\fBdtsgui_treeview\fPtree, \fBdtsgui_treenode\fPnode, const char *title, intcan_edit, intcan_sort, intcan_del, intnodeid, \fBdtsgui_treeviewpanel_cb\fPp_cb, void *data)"

.PP
Create a container in the tree view\&. Create and insert a new folder/container in the tree view with properties / call back\&. A panel will be created and supplied to the callback too implement on selection\&.
.PP
\fBNote:\fP
.RS 4
The root node is NULL this is the initial container\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
DTSTreeWindow::AppendContainer 
.PP
\fBdtsgui_treeviewpanel_cb\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fItree\fP The tree view to add the node too\&. 
.br
\fInode\fP The parent node or NULL to create root node\&. 
.br
\fItitle\fP The label shown on the tree\&. 
.br
\fIcan_edit\fP Allow editing of this node the XML node will be updated\&. 
.br
\fIcan_sort\fP Allow sorting of this node the XML node will be updated\&. 
.br
\fIcan_del\fP Not yet implemented for containers but will allow right click menu to delete\&. 
.br
\fInodeid\fP A value passed to the callback as convinence can be any value -1 will cause a blank panel\&. 
.br
\fIp_cb\fP Callback to pass panel for configuration on selection of the item\&. 
.br
\fIdata\fP Referenced object passed too callbacks\&. 
.RE
.PP

.PP
Definition at line 708 of file wrapper\&.cpp\&.
.PP
References DTSDVMCtrl::AppendContainer(), and DTSTreeWindow::GetTreeCtrl()\&.
.PP
Referenced by network_config_dns_domain_node(), and network_tree_setup()\&.
.PP
.nf
                                                                      {
    DTSTreeWindow *tw = (DTSTreeWindow*)tree;
    return tw->GetTreeCtrl()->AppendContainer(wxDataViewItem(node), title, can_edit, can_sort, can_del, nodeid, p_cb, data)\&.GetID();
}
.fi
.SS "\fBdtsgui_treenode\fP DTS_C_API::dtsgui_treeitem (\fBdtsgui_treeview\fPtree, \fBdtsgui_treenode\fPnode, const char *title, intcan_edit, intcan_sort, intcan_del, intnodeid, \fBdtsgui_treeviewpanel_cb\fPp_cb, void *data)"

.PP
Create a item in a container in the tree view\&. Create and insert a new item in the tree view in the node specified with properties / call back\&. A panel will be created and supplied to the callback too implement on selection\&.
.PP
\fBSee Also:\fP
.RS 4
DTSTreeWindow::AppendItem 
.PP
\fBdtsgui_treeviewpanel_cb\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fItree\fP The tree view to add the node too\&. 
.br
\fInode\fP The parent node or NULL to create root node\&. 
.br
\fItitle\fP The label shown on the tree\&. 
.br
\fIcan_edit\fP Allow editing of this node the XML node will be updated\&. 
.br
\fIcan_sort\fP Allow sorting of this node the XML node will be updated\&. 
.br
\fIcan_del\fP Allow right click menu to delete\&. 
.br
\fInodeid\fP A value passed to the callback as convinence can be any value -1 will cause a blank panel\&. 
.br
\fIp_cb\fP Callback to pass panel for configuration on selection of the item\&. 
.br
\fIdata\fP Referenced object passed too callbacks\&. 
.RE
.PP

.PP
Definition at line 732 of file wrapper\&.cpp\&.
.PP
References DTSDVMCtrl::AppendItem(), and DTSTreeWindow::GetTreeCtrl()\&.
.PP
Referenced by network_tree_setup()\&.
.PP
.nf
                                                          {
    DTSTreeWindow *tw = (DTSTreeWindow*)tree;
    return tw->GetTreeCtrl()->AppendItem(wxDataViewItem(node), title, can_edit, can_sort, can_del, nodeid, p_cb, data)\&.GetID();
}
.fi
.SS "void* DTS_C_API::dtsgui_treenodegetdata (\fBdtsgui_treenode\fPtn)"

.PP
Get reference for the user data of node\&. \fBSee Also:\fP
.RS 4
\fBDTSDVMListStore::GetUserData()\fP 
.RE
.PP
\fBNote:\fP
.RS 4
This needs to be unreferenced\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItn\fP Tree node\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to user data 
.RE
.PP

.PP
Definition at line 836 of file wrapper\&.cpp\&.
.PP
References DTSDVMListStore::GetUserData()\&.
.PP
Referenced by network_config_dns_domain_server()\&.
.PP
.nf
                                                 {
    DTSDVMListStore *ls = (DTSDVMListStore*)tn;
    return ls->GetUserData();
}
.fi
.SS "struct xml_node* DTS_C_API::dtsgui_treenodegetxml (\fBdtsgui_treenode\fPtn, char **buf)\fC [read]\fP"

.PP
Return the XML node reference held by the tree node\&. Returns the XML node of the node and optionally the title attribute\&.
.PP
\fBNote:\fP
.RS 4
The reference to the buffer and node needs to be droped\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItn\fP Tree node to obtain XML node from\&. 
.br
\fIbuf\fP a pointer to a buffer that will be set to the title attribute (Optional)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the XML node stored in the tree node\&. 
.RE
.PP

.PP
Definition at line 810 of file wrapper\&.cpp\&.
.PP
References DTSDVMListStore::GetXMLData()\&.
.PP
Referenced by network_adsl_link(), network_adsl_user(), network_config_dns_domain(), network_config_dns_domain_server(), network_config_dns_host(), network_iface(), network_route(), network_tos(), network_wan(), and network_wifi()\&.
.PP
.nf
                                                                       {
    DTSDVMListStore *ls = (DTSDVMListStore*)tn;
    return ls->GetXMLData(buf);
}
.fi
.SS "int DTS_C_API::dtsgui_treenodeid (\fBdtsgui_treenode\fPtn)"

.PP
Get the node id of a tree node\&. \fBSee Also:\fP
.RS 4
\fBDTSDVMListStore::GetNodeID()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fItn\fP Tree Node to get the node of\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the user defined tree node ID 
.RE
.PP

.PP
Definition at line 775 of file wrapper\&.cpp\&.
.PP
References DTSDVMListStore::GetNodeID()\&.
.PP
.nf
                                          {
    DTSDVMListStore *ls = (DTSDVMListStore*)tn;
    return ls->GetNodeID();
}
.fi
.SS "const char* DTS_C_API::dtsgui_treenodeparent (\fBdtsgui_treenode\fPtn)"

.PP
Get the name of the nodes parent\&. \fBSee Also:\fP
.RS 4
\fBDTSDVMListStore::GetParentTitle()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItn\fP Tree node 
.RE
.PP
\fBReturns:\fP
.RS 4
Name og the nodes parentI 
.RE
.PP

.PP
Definition at line 785 of file wrapper\&.cpp\&.
.PP
References DTSDVMListStore::GetParentTitle()\&.
.PP
Referenced by network_config_dns_domain_server_new()\&.
.PP
.nf
                                                      {
    DTSDVMListStore *entry = (DTSDVMListStore*)tn;
    return strdup(entry->GetParentTitle()\&.ToUTF8());
}
.fi
.SS "void DTS_C_API::dtsgui_treenodesetxml (\fBdtsgui_treenode\fPtn, struct xml_node *xn, const char *tattr)"

.PP
Add a XML node to the tree node\&. \fBSee Also:\fP
.RS 4
\fBDTSDVMListStore::SetXMLData\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItn\fP Tree node to set\&. 
.br
\fIxn\fP XML Node to reference\&. 
.br
\fItattr\fP Attribute in the XN that represents the title NULL if the value is the title\&. 
.RE
.PP

.PP
Definition at line 796 of file wrapper\&.cpp\&.
.PP
References DTSDVMListStore::SetXMLData()\&.
.PP
Referenced by network_tree_setup()\&.
.PP
.nf
                                                                                      {
    DTSDVMListStore *ls = (DTSDVMListStore*)tn;
    return ls->SetXMLData(xn, tattr);
}
.fi
.SS "\fBdtsgui_pane\fP DTS_C_API::dtsgui_treepane (\fBdtsgui_treeview\fPtv, const char *name, intbutmask, void *userdata, struct xml_doc *xmldoc)"

.PP
Create a panel owned by the tree\&. This will seldom be needed as panels are created and supplied in callbacks\&.
.PP
\fBSee Also:\fP
.RS 4
\fBDTSTreeWindow::CreatePane()\fP 
.PP
\fBpanel_buttons\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Panels used in tree views must be created as children of the tree\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItv\fP Tree view\&. 
.br
\fIname\fP Title placed on the panel top/center 
.br
\fIbutmask\fP A mask of buttons to be placed on the panel\&. 
.br
\fIuserdata\fP Referenced object available in event callbacks\&. 
.br
\fIxmldoc\fP XML doc reference used for updating XML elements\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
New Tree Pane\&. 
.RE
.PP

.PP
Definition at line 665 of file wrapper\&.cpp\&.
.PP
References DTSTreeWindow::CreatePane()\&.
.PP
.nf
                                                                                                                              {
    DTSTreeWindow *tw = (DTSTreeWindow*)tv;
    return tw->CreatePane(name, butmask, userdata, xmldoc);
}
.fi
.SS "\fBdtsgui_pane\fP DTS_C_API::dtsgui_treepane_default (\fBdtsgui_treeview\fPtv, \fBdtsgui_treenode\fPnode)"

.PP
Create a panel owned by the tree configured from the specified node\&. Create a pane from information obtained from node\&. Name of node is used for the panel title and a Accept/Undo button\&.
.PP
\fBNote:\fP
.RS 4
if node id is -1 no name/buttons are added the page is blank\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBDTSTreeWindow::CreatePane()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fItv\fP Tree view\&. 
.br
\fInode\fP used as template for panel\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
New Tree Pane\&. 
.RE
.PP

.PP
Definition at line 683 of file wrapper\&.cpp\&.
.PP
References DTSTreeWindow::CreatePane()\&.
.PP
.nf
                                                                              {
    DTSTreeWindow *tw = (DTSTreeWindow*)tv;
    return tw->CreatePane(wxDataViewItem(node));
}
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for DTS Application wxWidgets GUI Library from the source code\&.
