.TH "src/include/dtsgui.h" 3 "Wed Oct 9 2013" "Version 0.00" "DTS Application wxWidgets GUI Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/include/dtsgui.h \- 
.PP
Main include file for the GUI Library\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <dtsapp\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBpoint\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBwx_PANEL_BUTTON_NAV\fP   \fBwx_PANEL_EVENT_BUTTON_FIRST\fP | \fBwx_PANEL_EVENT_BUTTON_BACK\fP | \fBwx_PANEL_EVENT_BUTTON_FWD\fP | \fBwx_PANEL_EVENT_BUTTON_LAST\fP"
.br
.ti -1c
.RI "#define \fBwx_PANEL_BUTTON_DIR\fP   \fBwx_PANEL_EVENT_BUTTON_BACK\fP | \fBwx_PANEL_EVENT_BUTTON_FWD\fP"
.br
.ti -1c
.RI "#define \fBwx_PANEL_BUTTON_ACTION\fP   \fBwx_PANEL_EVENT_BUTTON_YES\fP | \fBwx_PANEL_EVENT_BUTTON_NO\fP"
.br
.ti -1c
.RI "#define \fBwx_PANEL_BUTTON_ALL\fP   \fBwx_PANEL_BUTTON_ACTION\fP | \fBwx_PANEL_BUTTON_NAV\fP"
.br
.ti -1c
.RI "#define \fBwx_PANEL_EVENT_BUTTON_NONE\fP   0"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBdtsgui\fP \fBdtsgui\fP"
.br
.ti -1c
.RI "typedef struct \fBdtsgui_wizard\fP \fBdtsgui_wizard\fP"
.br
.ti -1c
.RI "typedef void * \fBdtsgui_menu\fP"
.br
.ti -1c
.RI "typedef void * \fBdtsgui_menuitem\fP"
.br
.ti -1c
.RI "typedef void * \fBdtsgui_pane\fP"
.br
.ti -1c
.RI "typedef void * \fBdtsgui_notebook\fP"
.br
.ti -1c
.RI "typedef void * \fBdtsgui_treeview\fP"
.br
.ti -1c
.RI "typedef void * \fBdtsgui_tabview\fP"
.br
.ti -1c
.RI "typedef void * \fBdtsgui_treenode\fP"
.br
.ti -1c
.RI "typedef void * \fBdtsgui_progress\fP"
.br
.ti -1c
.RI "typedef struct \fBform_item\fP \fBform_item\fP"
.br
.ti -1c
.RI "typedef struct \fBdynamic_panel\fP \fBdynamic_panel\fP"
.br
.ti -1c
.RI "typedef int(* \fBdtsgui_configcb\fP )(struct \fBdtsgui\fP *, void *)"
.br
.RI "\fICallback called on application execution\&. \fP"
.ti -1c
.RI "typedef \fBdtsgui_pane\fP(* \fBdtsgui_menucb\fP )(struct \fBdtsgui\fP *, void *)"
.br
.ti -1c
.RI "typedef int(* \fBevent_callback\fP )(struct \fBdtsgui\fP *, \fBdtsgui_pane\fP, int, int, void *)"
.br
.ti -1c
.RI "typedef \fBdtsgui_pane\fP(* \fBdtsgui_dynpanel\fP )(struct \fBdtsgui\fP *, const char *, void *)"
.br
.ti -1c
.RI "typedef \fBdtsgui_pane\fP(* \fBdtsgui_tree_cb\fP )(struct \fBdtsgui\fP *, \fBdtsgui_treeview\fP, \fBdtsgui_treenode\fP, enum \fBtree_cbtype\fP cb_type, const char *, void *)"
.br
.ti -1c
.RI "typedef void(* \fBdtsgui_xmltreenode_cb\fP )(\fBdtsgui_treeview\fP, \fBdtsgui_treenode\fP, struct xml_node *, void *)"
.br
.ti -1c
.RI "typedef void(* \fBdtsgui_treeviewpanel_cb\fP )(\fBdtsgui_pane\fP, \fBdtsgui_treeview\fP, \fBdtsgui_treenode\fP, void *)"
.br
.ti -1c
.RI "typedef void(* \fBdtsgui_tabpanel_cb\fP )(\fBdtsgui_pane\fP, void *)"
.br
.ti -1c
.RI "typedef void *(* \fBdtsgui_toolbar_create\fP )(struct \fBdtsgui\fP *, void *, long, int, const char *, void *data)"
.br
.ti -1c
.RI "typedef void(* \fBdtsgui_tabpane_newdata_cb\fP )(struct xml_doc *, struct xml_node *, void *, void **, int *)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBtree_cbtype\fP { \fBDTSGUI_TREE_CB_SELECT\fP, \fBDTSGUI_TREE_CB_DELETE\fP, \fBDTSGUI_TREE_CB_EDIT\fP }"
.br
.ti -1c
.RI "enum \fBform_data_type\fP { \fBDTSGUI_FORM_DATA_PTR\fP, \fBDTSGUI_FORM_DATA_XML\fP }"
.br
.ti -1c
.RI "enum \fBpanel_buttons\fP { \fBwx_PANEL_EVENT_BUTTON_FIRST\fP = 1 << 0, \fBwx_PANEL_EVENT_BUTTON_BACK\fP = 1 << 1, \fBwx_PANEL_EVENT_BUTTON_FWD\fP = 1 << 2, \fBwx_PANEL_EVENT_BUTTON_LAST\fP = 1 << 3, \fBwx_PANEL_EVENT_BUTTON_YES\fP = 1 << 4, \fBwx_PANEL_EVENT_BUTTON_NO\fP = 1 << 5 }"
.br
.ti -1c
.RI "enum \fBpanel_events\fP { \fBwx_PANEL_EVENT_BUTTON\fP = 1 << 0, \fBwx_PANEL_EVENT_COMBO_ENTER\fP = 1 << 1, \fBwx_PANEL_EVENT_COMBO_UPDATE\fP = 1 << 2, \fBwx_PANEL_EVENT_DTS\fP = 1 << 3 }"
.br
.ti -1c
.RI "enum \fBtree_newnode_flags\fP { \fBDTS_TREE_NEW_NODE_EDIT\fP = 1 << 0, \fBDTS_TREE_NEW_NODE_DELETE\fP = 1 << 1, \fBDTS_TREE_NEW_NODE_CONTAINER\fP = 1 << 2, \fBDTS_TREE_NEW_NODE_SORT\fP = 1 << 3 }"
.br
.ti -1c
.RI "enum \fBpanel_type\fP { \fBwx_DTSPANEL_WINDOW\fP, \fBwx_DTSPANEL_PANEL\fP, \fBwx_DTSPANEL_SCROLLPANEL\fP, \fBwx_DTSPANEL_DIALOG\fP, \fBwx_DTSPANEL_TREE\fP, \fBwx_DTSPANEL_WIZARD\fP, \fBwx_DTSPANEL_TAB\fP }"
.br
.ti -1c
.RI "enum \fBwidget_type\fP { \fBDTS_WIDGET_TEXTBOX\fP, \fBDTS_WIDGET_CHECKBOX\fP, \fBDTS_WIDGET_LISTBOX\fP, \fBDTS_WIDGET_COMBOBOX\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBdtsgui_config\fP (\fBdtsgui_configcb\fP confcallback_cb, void *userdata, struct \fBpoint\fP wsize, struct \fBpoint\fP wpos, const char *title, const char *status)"
.br
.RI "\fIConfigure the GUI and create a application frame\&. \fP"
.ti -1c
.RI "int \fBdtsgui_run\fP (int argc, char **argv)"
.br
.RI "\fIConfigure the GUI and create a application frame\&. \fP"
.ti -1c
.RI "void * \fBdtsgui_userdata\fP (struct \fBdtsgui\fP *\fBdtsgui\fP)"
.br
.RI "\fIObtain a reference for the application userdata\&. \fP"
.ti -1c
.RI "void \fBdtsgui_titleappend\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *text)"
.br
.RI "\fIAppend text to the title enclosed in square brackets Update the main application title bar text\&. \fP"
.ti -1c
.RI "void \fBdtsgui_sendevent\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, int eid)"
.br
.RI "\fIEmit a event handled by event callback's A event is emited and recived by all active handlers The ID can be determined as required\&. \fP"
.ti -1c
.RI "void \fBdtsgui_setwindow\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, \fBdtsgui_pane\fP p)"
.br
.RI "\fISet the displayed panel\&. \fP"
.ti -1c
.RI "void \fBdtsgui_setuptoolbar\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, \fBdtsgui_toolbar_create\fP cb, void *data)"
.br
.RI "\fICallback to run to create and activate the toolbar\&. The toolbar has of yet not been wrapped into the C API Its recomended that a C++ object be linked that contains a derived class of wxToolbar\&. \fP"
.ti -1c
.RI "void \fBdtsgui_set_toolbar\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, int show)"
.br
.RI "\fIDisable or enable the toolbar\&. \fP"
.ti -1c
.RI "void \fBdtsgui_setstatus\fP (\fBdtsgui_pane\fP pane, const char *status)"
.br
.RI "\fIUpdate the status bar message of panel\&. \fP"
.ti -1c
.RI "\fBdtsgui_menu\fP \fBdtsgui_newmenu\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *name)"
.br
.RI "\fICreate a new menu and append it to the menu bar\&. \fP"
.ti -1c
.RI "\fBdtsgui_menuitem\fP \fBdtsgui_newmenucb\fP (\fBdtsgui_menu\fP dtsmenu, struct \fBdtsgui\fP *\fBdtsgui\fP, const char *hint, const char *title, int blank, \fBdtsgui_dynpanel\fP cb, void *data)"
.br
.RI "\fICreate a menu item that will call a function with supplied data\&. \fP"
.ti -1c
.RI "\fBdtsgui_menuitem\fP \fBdtsgui_newmenuitem\fP (\fBdtsgui_menu\fP dtsmenu, struct \fBdtsgui\fP *\fBdtsgui\fP, const char *hint, \fBdtsgui_pane\fP pane)"
.br
.RI "\fICreate a menu item that will activate the pane provided\&. \fP"
.ti -1c
.RI "void \fBdtsgui_menuitemenable\fP (\fBdtsgui_menuitem\fP dmi, int enable)"
.br
.ti -1c
.RI "void \fBdtsgui_menusep\fP (\fBdtsgui_menu\fP dtsmenu)"
.br
.RI "\fIAdd Menu seperator to the menu\&. \fP"
.ti -1c
.RI "void \fBdtsgui_about\fP (\fBdtsgui_menu\fP dtsmenu, struct \fBdtsgui\fP *\fBdtsgui\fP, const char *text)"
.br
.RI "\fIAdd Menu item will pop up a 'about' box\&. \fP"
.ti -1c
.RI "void \fBdtsgui_close\fP (\fBdtsgui_menu\fP dtsmenu, struct \fBdtsgui\fP *\fBdtsgui\fP)"
.br
.RI "\fIAdd Menu item that will close the app after sending a save event\&. \fP"
.ti -1c
.RI "void \fBdtsgui_exit\fP (\fBdtsgui_menu\fP dtsmenu, struct \fBdtsgui\fP *\fBdtsgui\fP)"
.br
.RI "\fIAdd Menu item that will abort the app without save event been generated\&. \fP"
.ti -1c
.RI "\fBdtsgui_pane\fP \fBdtsgui_panel\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *name, const char *title, int butmask, enum \fBpanel_type\fP type, void *userdata)"
.br
.RI "\fICreate a pannel to be displayed\&. \fP"
.ti -1c
.RI "\fBdtsgui_pane\fP \fBdtsgui_textpane\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *title, const char *buf)"
.br
.RI "\fICreate a text display box with the supplied buffer\&. \fP"
.ti -1c
.RI "void \fBdtsgui_settitle\fP (\fBdtsgui_pane\fP pane, const char *title)"
.br
.RI "\fIUpdate the title on the panel if it exists\&. \fP"
.ti -1c
.RI "void \fBdtsgui_delpane\fP (\fBdtsgui_pane\fP pane)"
.br
.RI "\fIDelete a panel\&. \fP"
.ti -1c
.RI "void * \fBdtsgui_paneldata\fP (\fBdtsgui_pane\fP pane)"
.br
.RI "\fIObtain a reference to the userdata of panel\&. \fP"
.ti -1c
.RI "void \fBdtsgui_setevcallback\fP (\fBdtsgui_pane\fP pane, \fBevent_callback\fP evcb, void *data)"
.br
.RI "\fISet event callback function for panel\&. \fP"
.ti -1c
.RI "void \fBdtsgui_configcallback\fP (\fBdtsgui_pane\fP pane, \fBdtsgui_configcb\fP cb, void *data)"
.br
.RI "\fISet config callback function for panel (UNUSED)\&. \fP"
.ti -1c
.RI "void \fBdtsgui_panel_setxml\fP (\fBdtsgui_pane\fP pane, struct xml_doc *xmldoc)"
.br
.RI "\fIPass a reference to a XML Doc Structure to the panel\&. \fP"
.ti -1c
.RI "struct xml_doc * \fBdtsgui_panelxml\fP (\fBdtsgui_pane\fP pane)"
.br
.RI "\fIGet reference to previously allocated XML Doc\&. \fP"
.ti -1c
.RI "void \fBdtsgui_xmlpanel_update\fP (\fBdtsgui_pane\fP pane)"
.br
.RI "\fIupdate all XML elements in the panel\&. \fP"
.ti -1c
.RI "\fBdtsgui_tabview\fP \fBdtsgui_tabwindow\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *title, void *data)"
.br
.RI "\fICreate a tab view panel\&. \fP"
.ti -1c
.RI "\fBdtsgui_pane\fP \fBdtsgui_newtabpage\fP (\fBdtsgui_tabview\fP tv, const char *name, int butmask, void *userdata, struct xml_doc *xmldoc, \fBdtsgui_tabpanel_cb\fP cb, void *cdata)"
.br
.RI "\fICreate and append a tab to the view\&. \fP"
.ti -1c
.RI "\fBdtsgui_pane\fP \fBdtsgui_tabpage_insert\fP (\fBdtsgui_tabview\fP tv, const char *name, int butmask, void *userdata, struct xml_doc *xmldoc, \fBdtsgui_tabpanel_cb\fP cb, void *cdata, int pos, int undo)"
.br
.RI "\fICreate and append a tab to the view\&. \fP"
.ti -1c
.RI "void \fBdtsgui_newxmltabpane\fP (\fBdtsgui_tabview\fP tabv, \fBdtsgui_pane\fP p, const char *xpath, const char *node, const char *vitem, const char *tattr, \fBdtsgui_tabpane_newdata_cb\fP data_cb, \fBdtsgui_tabpanel_cb\fP cb, void *cdata, struct xml_doc *xmldoc, void *data)"
.br
.RI "\fIHelper function to handle 'Adding' a new tab from a existing tab\&. \fP"
.ti -1c
.RI "\fBdtsgui_treeview\fP \fBdtsgui_treewindow\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *title, \fBdtsgui_tree_cb\fP tree_cb, void *userdata, struct xml_doc *xmldoc)"
.br
.RI "\fICreate a treepane view\&. \fP"
.ti -1c
.RI "\fBdtsgui_pane\fP \fBdtsgui_treepane\fP (\fBdtsgui_treeview\fP tv, const char *name, int butmask, void *userdata, struct xml_doc *xmldoc)"
.br
.RI "\fICreate a tree view panel with information\&. \fP"
.ti -1c
.RI "\fBdtsgui_pane\fP \fBdtsgui_treepane_default\fP (\fBdtsgui_treeview\fP self, \fBdtsgui_treenode\fP node)"
.br
.RI "\fICreate a tree view panel with information\&. \fP"
.ti -1c
.RI "void \fBdtsgui_nodesetxml\fP (\fBdtsgui_treeview\fP tree, \fBdtsgui_treenode\fP node, const char *title)"
.br
.RI "\fIUpdate the XML Node with a new name\&. \fP"
.ti -1c
.RI "\fBdtsgui_treenode\fP \fBdtsgui_treecont\fP (\fBdtsgui_treeview\fP tree, \fBdtsgui_treenode\fP node, const char *title, int can_edit, int can_sort, int can_del, int nodeid, \fBdtsgui_treeviewpanel_cb\fP p_cb, void *data)"
.br
.RI "\fICreate a container in the tree view\&. \fP"
.ti -1c
.RI "\fBdtsgui_treenode\fP \fBdtsgui_treeitem\fP (\fBdtsgui_treeview\fP tree, \fBdtsgui_treenode\fP node, const char *title, int can_edit, int can_sort, int can_del, int nodeid, \fBdtsgui_treeviewpanel_cb\fP p_cb, void *data)"
.br
.RI "\fICreate a item in a container\&. \fP"
.ti -1c
.RI "void \fBdtsgui_treenodesetxml\fP (\fBdtsgui_treenode\fP tn, struct xml_node *xn, const char *tattr)"
.br
.RI "\fIAdd a XML node to the tree node\&. \fP"
.ti -1c
.RI "struct xml_node * \fBdtsgui_treenodegetxml\fP (\fBdtsgui_treenode\fP tn, char **buf)"
.br
.ti -1c
.RI "void * \fBdtsgui_treenodegetdata\fP (\fBdtsgui_treenode\fP tn)"
.br
.RI "\fIGet reference for the user data of node\&. \fP"
.ti -1c
.RI "const char * \fBdtsgui_treenodeparent\fP (\fBdtsgui_treenode\fP tn)"
.br
.RI "\fIGet the name of the nodes parent\&. \fP"
.ti -1c
.RI "void \fBdtsgui_newxmltreenode\fP (\fBdtsgui_treeview\fP tree, \fBdtsgui_pane\fP p, \fBdtsgui_treenode\fP tn, const char *xpath, const char *node, const char *vitem, const char *tattr, int nid, int flags, \fBdtsgui_xmltreenode_cb\fP node_cb, void *data, \fBdtsgui_treeviewpanel_cb\fP p_cb)"
.br
.RI "\fIHelper function to handle 'Adding' a new node from a existing node\&. \fP"
.ti -1c
.RI "int \fBdtsgui_treenodeid\fP (\fBdtsgui_treenode\fP tn)"
.br
.RI "\fIGet the node id of a tree node\&. \fP"
.ti -1c
.RI "struct xml_node * \fBdtsgui_panetoxml\fP (\fBdtsgui_pane\fP p, const char *xpath, const char *node, const char *nodeval, const char *attrkey)"
.br
.RI "\fICreate a node from the elements on the panel\&. \fP"
.ti -1c
.RI "void \fBdtsgui_rundialog\fP (\fBdtsgui_pane\fP pane, \fBevent_callback\fP evcb, void *data)"
.br
.RI "\fIExecute a dialog panel\&. Pop up and run a dialog pane the result will be obtained int the event handler\&. \fP"
.ti -1c
.RI "void \fBdtsgui_textbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *value, void *data)"
.br
.ti -1c
.RI "void \fBdtsgui_textbox_multi\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *value, void *data)"
.br
.ti -1c
.RI "void \fBdtsgui_passwdbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *value, void *data)"
.br
.ti -1c
.RI "void \fBdtsgui_checkbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *checkval, const char *uncheck, int ischecked, void *data)"
.br
.ti -1c
.RI "struct \fBform_item\fP * \fBdtsgui_listbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, void *data)"
.br
.ti -1c
.RI "struct \fBform_item\fP * \fBdtsgui_combobox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, void *data)"
.br
.ti -1c
.RI "void \fBdtsgui_xmltextbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"
.br
.ti -1c
.RI "void \fBdtsgui_xmltextbox_multi\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"
.br
.ti -1c
.RI "void \fBdtsgui_xmlpasswdbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"
.br
.ti -1c
.RI "void \fBdtsgui_xmlcheckbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *checkval, const char *uncheckval, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"
.br
.ti -1c
.RI "struct \fBform_item\fP * \fBdtsgui_xmllistbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"
.br
.ti -1c
.RI "struct \fBform_item\fP * \fBdtsgui_xmlcombobox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"
.br
.ti -1c
.RI "void \fBdtsgui_xnode_textbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *attr)"
.br
.ti -1c
.RI "void \fBdtsgui_xnode_textbox_multi\fP (\fBdtsgui_pane\fP pane, const char *title, const char *attr)"
.br
.ti -1c
.RI "void \fBdtsgui_xnode_passwdbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *attr)"
.br
.ti -1c
.RI "void \fBdtsgui_xnode_checkbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *checkval, const char *uncheckval, const char *attr)"
.br
.ti -1c
.RI "struct \fBform_item\fP * \fBdtsgui_xnode_listbox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *attr)"
.br
.ti -1c
.RI "struct \fBform_item\fP * \fBdtsgui_xnode_combobox\fP (\fBdtsgui_pane\fP pane, const char *title, const char *attr)"
.br
.ti -1c
.RI "void \fBdtsgui_listbox_add\fP (struct \fBform_item\fP *lbox, const char *text, const char *value)"
.br
.ti -1c
.RI "void \fBdtsgui_listbox_addxml\fP (struct \fBform_item\fP *lb, struct xml_doc *xmldoc, const char *xpath, const char *nattr, const char *vattr)"
.br
.ti -1c
.RI "void \fBdtsgui_listbox_set\fP (struct \fBform_item\fP *listbox, int idx)"
.br
.ti -1c
.RI "int \fBdtsgui_confirm\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *text)"
.br
.ti -1c
.RI "void \fBdtsgui_alert\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *text)"
.br
.ti -1c
.RI "int \fBdtsgui_progress_start\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *text, int maxval, int quit)"
.br
.RI "\fIInitialise the progress dialog Pop up a dialog box that can be updated to showprogress with a optional cancel button\&. \fP"
.ti -1c
.RI "int \fBdtsgui_progress_update\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, int newval, const char *newtext)"
.br
.RI "\fIUpdate the progress bar counter This function updates the current progress value and optionally allows setting new displayed text\&. \fP"
.ti -1c
.RI "int \fBdtsgui_progress_increment\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, int ival, const char *newtext)"
.br
.RI "\fIIncrements the counter by adding to it not setting it\&. \fP"
.ti -1c
.RI "void \fBdtsgui_progress_end\fP (struct \fBdtsgui\fP *\fBdtsgui\fP)"
.br
.RI "\fIDisable the progress bar\&. \fP"
.ti -1c
.RI "struct bucket_list * \fBdtsgui_panel_items\fP (\fBdtsgui_pane\fP pane)"
.br
.ti -1c
.RI "void * \fBdtsgui_item_data\fP (struct \fBform_item\fP *fi)"
.br
.ti -1c
.RI "const char * \fBdtsgui_item_name\fP (struct \fBform_item\fP *fi)"
.br
.ti -1c
.RI "const char * \fBdtsgui_item_value\fP (struct \fBform_item\fP *fi)"
.br
.ti -1c
.RI "struct \fBform_item\fP * \fBdtsgui_finditem\fP (\fBdtsgui_pane\fP p, const char *name)"
.br
.ti -1c
.RI "const char * \fBdtsgui_findvalue\fP (\fBdtsgui_pane\fP p, const char *name)"
.br
.ti -1c
.RI "struct \fBdtsgui_wizard\fP * \fBdtsgui_newwizard\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *title)"
.br
.RI "\fICreate a new wizard\&. \fP"
.ti -1c
.RI "\fBdtsgui_pane\fP \fBdtsgui_wizard_addpage\fP (struct \fBdtsgui_wizard\fP *dtswiz, const char *title, void *userdata, struct xml_doc *xmldoc)"
.br
.RI "\fICreate a panel appended to the wizard\&. \fP"
.ti -1c
.RI "int \fBdtsgui_runwizard\fP (struct \fBdtsgui_wizard\fP *dtswiz)"
.br
.RI "\fIRun the wizard\&. \fP"
.ti -1c
.RI "const char * \fBdtsgui_filesave\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *title, const char *path, const char *name, const char *filter)"
.br
.ti -1c
.RI "const char * \fBdtsgui_fileopen\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *title, const char *path, const char *name, const char *filter)"
.br
.ti -1c
.RI "void \fBdtsgui_menuenable\fP (\fBdtsgui_menu\fP dm, int enable)"
.br
.ti -1c
.RI "struct curl_post * \fBdtsgui_pane2post\fP (\fBdtsgui_pane\fP p)"
.br
.RI "\fIPrepare a HTTP POST structure from panel\&. \fP"
.ti -1c
.RI "struct basic_auth * \fBdtsgui_pwdialog\fP (const char *user, const char *passwd, void *data)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Main include file for the GUI Library\&. 

This file needs to be included to use the defined functions and API\&. Including it in a C++ file without defining _DTS_C_API will not allow access to the namespace \fBDTS_C_API\fP\&.
.PP
It is not recomended to use the C API from C++\&. 
.PP
Definition in file \fBdtsgui\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define wx_PANEL_BUTTON_ACTION   \fBwx_PANEL_EVENT_BUTTON_YES\fP | \fBwx_PANEL_EVENT_BUTTON_NO\fP"

.PP
Definition at line 137 of file dtsgui\&.h\&.
.SS "#define wx_PANEL_BUTTON_ALL   \fBwx_PANEL_BUTTON_ACTION\fP | \fBwx_PANEL_BUTTON_NAV\fP"

.PP
Definition at line 138 of file dtsgui\&.h\&.
.SS "#define wx_PANEL_BUTTON_DIR   \fBwx_PANEL_EVENT_BUTTON_BACK\fP | \fBwx_PANEL_EVENT_BUTTON_FWD\fP"

.PP
Definition at line 136 of file dtsgui\&.h\&.
.SS "#define wx_PANEL_BUTTON_NAV   \fBwx_PANEL_EVENT_BUTTON_FIRST\fP | \fBwx_PANEL_EVENT_BUTTON_BACK\fP | \fBwx_PANEL_EVENT_BUTTON_FWD\fP | \fBwx_PANEL_EVENT_BUTTON_LAST\fP"

.PP
Definition at line 135 of file dtsgui\&.h\&.
.SS "#define wx_PANEL_EVENT_BUTTON_NONE   0"

.PP
Definition at line 139 of file dtsgui\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBdtsgui\fP \fBdtsgui\fP"

.PP
Definition at line 38 of file dtsgui\&.h\&.
.SS "typedef \fBdtsgui_pane\fP(* dtsgui_dynpanel)(struct \fBdtsgui\fP *, const char *, void *)"

.PP
Definition at line 81 of file dtsgui\&.h\&.
.SS "typedef void* \fBdtsgui_menu\fP"

.PP
Definition at line 42 of file dtsgui\&.h\&.
.SS "typedef \fBdtsgui_pane\fP(* dtsgui_menucb)(struct \fBdtsgui\fP *, void *)"

.PP
Definition at line 79 of file dtsgui\&.h\&.
.SS "typedef void* \fBdtsgui_menuitem\fP"

.PP
Definition at line 43 of file dtsgui\&.h\&.
.SS "typedef void* \fBdtsgui_notebook\fP"

.PP
Definition at line 47 of file dtsgui\&.h\&.
.SS "typedef void* \fBdtsgui_pane\fP"

.PP
Definition at line 46 of file dtsgui\&.h\&.
.SS "typedef void* \fBdtsgui_progress\fP"

.PP
Definition at line 52 of file dtsgui\&.h\&.
.SS "typedef void(* dtsgui_tabpane_newdata_cb)(struct xml_doc *, struct xml_node *, void *, void **, int *)"

.PP
Definition at line 87 of file dtsgui\&.h\&.
.SS "typedef void(* dtsgui_tabpanel_cb)(\fBdtsgui_pane\fP, void *)"

.PP
Definition at line 85 of file dtsgui\&.h\&.
.SS "typedef void* \fBdtsgui_tabview\fP"

.PP
Definition at line 49 of file dtsgui\&.h\&.
.SS "typedef void*(* dtsgui_toolbar_create)(struct \fBdtsgui\fP *, void *, long, int, const char *, void *data)"

.PP
Definition at line 86 of file dtsgui\&.h\&.
.SS "typedef \fBdtsgui_pane\fP(* dtsgui_tree_cb)(struct \fBdtsgui\fP *, \fBdtsgui_treeview\fP, \fBdtsgui_treenode\fP, enum \fBtree_cbtype\fP cb_type, const char *, void *)"

.PP
Definition at line 82 of file dtsgui\&.h\&.
.SS "typedef void* \fBdtsgui_treenode\fP"

.PP
Definition at line 51 of file dtsgui\&.h\&.
.SS "typedef void* \fBdtsgui_treeview\fP"

.PP
Definition at line 48 of file dtsgui\&.h\&.
.SS "typedef void(* dtsgui_treeviewpanel_cb)(\fBdtsgui_pane\fP, \fBdtsgui_treeview\fP, \fBdtsgui_treenode\fP, void *)"

.PP
Definition at line 84 of file dtsgui\&.h\&.
.SS "typedef struct \fBdtsgui_wizard\fP \fBdtsgui_wizard\fP"

.PP
Definition at line 39 of file dtsgui\&.h\&.
.SS "typedef void(* dtsgui_xmltreenode_cb)(\fBdtsgui_treeview\fP, \fBdtsgui_treenode\fP, struct xml_node *, void *)"

.PP
Definition at line 83 of file dtsgui\&.h\&.
.SS "typedef struct \fBdynamic_panel\fP \fBdynamic_panel\fP"

.PP
Definition at line 56 of file dtsgui\&.h\&.
.SS "typedef int(* event_callback)(struct \fBdtsgui\fP *, \fBdtsgui_pane\fP, int, int, void *)"

.PP
Definition at line 80 of file dtsgui\&.h\&.
.SS "typedef struct \fBform_item\fP \fBform_item\fP"

.PP
Definition at line 55 of file dtsgui\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBform_data_type\fP"

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIDTSGUI_FORM_DATA_PTR \fP\fP
.TP
\fB\fIDTSGUI_FORM_DATA_XML \fP\fP

.PP
Definition at line 64 of file dtsgui\&.h\&.
.SS "enum \fBpanel_buttons\fP"

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIwx_PANEL_EVENT_BUTTON_FIRST \fP\fP
.TP
\fB\fIwx_PANEL_EVENT_BUTTON_BACK \fP\fP
.TP
\fB\fIwx_PANEL_EVENT_BUTTON_FWD \fP\fP
.TP
\fB\fIwx_PANEL_EVENT_BUTTON_LAST \fP\fP
.TP
\fB\fIwx_PANEL_EVENT_BUTTON_YES \fP\fP
.TP
\fB\fIwx_PANEL_EVENT_BUTTON_NO \fP\fP

.PP
Definition at line 95 of file dtsgui\&.h\&.
.SS "enum \fBpanel_events\fP"

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIwx_PANEL_EVENT_BUTTON \fP\fP
.TP
\fB\fIwx_PANEL_EVENT_COMBO_ENTER \fP\fP
.TP
\fB\fIwx_PANEL_EVENT_COMBO_UPDATE \fP\fP
.TP
\fB\fIwx_PANEL_EVENT_DTS \fP\fP

.PP
Definition at line 104 of file dtsgui\&.h\&.
.SS "enum \fBpanel_type\fP"

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIwx_DTSPANEL_WINDOW \fP\fP
.TP
\fB\fIwx_DTSPANEL_PANEL \fP\fP
.TP
\fB\fIwx_DTSPANEL_SCROLLPANEL \fP\fP
.TP
\fB\fIwx_DTSPANEL_DIALOG \fP\fP
.TP
\fB\fIwx_DTSPANEL_TREE \fP\fP
.TP
\fB\fIwx_DTSPANEL_WIZARD \fP\fP
.TP
\fB\fIwx_DTSPANEL_TAB \fP\fP

.PP
Definition at line 118 of file dtsgui\&.h\&.
.SS "enum \fBtree_cbtype\fP"

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIDTSGUI_TREE_CB_SELECT \fP\fP
.TP
\fB\fIDTSGUI_TREE_CB_DELETE \fP\fP
.TP
\fB\fIDTSGUI_TREE_CB_EDIT \fP\fP

.PP
Definition at line 58 of file dtsgui\&.h\&.
.SS "enum \fBtree_newnode_flags\fP"

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIDTS_TREE_NEW_NODE_EDIT \fP\fP
.TP
\fB\fIDTS_TREE_NEW_NODE_DELETE \fP\fP
.TP
\fB\fIDTS_TREE_NEW_NODE_CONTAINER \fP\fP
.TP
\fB\fIDTS_TREE_NEW_NODE_SORT \fP\fP

.PP
Definition at line 111 of file dtsgui\&.h\&.
.SS "enum \fBwidget_type\fP"

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIDTS_WIDGET_TEXTBOX \fP\fP
.TP
\fB\fIDTS_WIDGET_CHECKBOX \fP\fP
.TP
\fB\fIDTS_WIDGET_LISTBOX \fP\fP
.TP
\fB\fIDTS_WIDGET_COMBOBOX \fP\fP

.PP
Definition at line 128 of file dtsgui\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void dtsgui_alert (struct \fBdtsgui\fP *dtsgui, const char *text)"

.PP
Definition at line 1073 of file wrapper\&.cpp\&.
.SS "void dtsgui_checkbox (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *checkval, const char *uncheck, intischecked, void *data)"

.PP
Definition at line 1103 of file wrapper\&.cpp\&.
.SS "struct \fBform_item\fP* dtsgui_combobox (\fBdtsgui_pane\fPpane, const char *title, const char *name, void *data)\fC [read]\fP"

.PP
Definition at line 1113 of file wrapper\&.cpp\&.
.SS "int dtsgui_confirm (struct \fBdtsgui\fP *dtsgui, const char *text)"

.PP
Definition at line 1068 of file wrapper\&.cpp\&.
.SS "const char* dtsgui_fileopen (struct \fBdtsgui\fP *dtsgui, const char *title, const char *path, const char *name, const char *filter)"

.PP
Definition at line 1083 of file wrapper\&.cpp\&.
.SS "const char* dtsgui_filesave (struct \fBdtsgui\fP *dtsgui, const char *title, const char *path, const char *name, const char *filter)"

.PP
Definition at line 1078 of file wrapper\&.cpp\&.
.SS "struct \fBform_item\fP* dtsgui_finditem (\fBdtsgui_pane\fPp, const char *name)\fC [read]\fP"

.PP
Definition at line 1053 of file wrapper\&.cpp\&.
.SS "const char* dtsgui_findvalue (\fBdtsgui_pane\fPp, const char *name)"

.PP
Definition at line 1058 of file wrapper\&.cpp\&.
.SS "void* dtsgui_item_data (struct \fBform_item\fP *fi)"

.PP
Definition at line 1037 of file wrapper\&.cpp\&.
.SS "const char* dtsgui_item_name (struct \fBform_item\fP *fi)"

.PP
Definition at line 1041 of file wrapper\&.cpp\&.
.SS "const char* dtsgui_item_value (struct \fBform_item\fP *fi)"

.PP
Definition at line 1045 of file wrapper\&.cpp\&.
.SS "struct \fBform_item\fP* dtsgui_listbox (\fBdtsgui_pane\fPpane, const char *title, const char *name, void *data)\fC [read]\fP"

.PP
Definition at line 1108 of file wrapper\&.cpp\&.
.SS "void dtsgui_listbox_add (struct \fBform_item\fP *lbox, const char *text, const char *value)"

.PP
Definition at line 1024 of file wrapper\&.cpp\&.
.SS "void dtsgui_listbox_addxml (struct \fBform_item\fP *lb, struct xml_doc *xmldoc, const char *xpath, const char *nattr, const char *vattr)"

.PP
Definition at line 1049 of file wrapper\&.cpp\&.
.SS "void dtsgui_listbox_set (struct \fBform_item\fP *listbox, intidx)"

.PP
Definition at line 1028 of file wrapper\&.cpp\&.
.SS "void dtsgui_menuenable (\fBdtsgui_menu\fPdm, intenable)"

.PP
Definition at line 33 of file cxxapi\&.cpp\&.
.SS "void dtsgui_menuitemenable (\fBdtsgui_menuitem\fPdmi, intenable)"

.PP
Definition at line 236 of file wrapper\&.cpp\&.
.SS "struct bucket_list* dtsgui_panel_items (\fBdtsgui_pane\fPpane)\fC [read]\fP"

.PP
Definition at line 1032 of file wrapper\&.cpp\&.
.SS "void dtsgui_passwdbox (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *value, void *data)"

.PP
Definition at line 1098 of file wrapper\&.cpp\&.
.SS "struct basic_auth* dtsgui_pwdialog (const char *user, const char *passwd, void *data)\fC [read]\fP"

.PP
Definition at line 1063 of file wrapper\&.cpp\&.
.SS "void dtsgui_textbox (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *value, void *data)"

.PP
Definition at line 1088 of file wrapper\&.cpp\&.
.SS "void dtsgui_textbox_multi (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *value, void *data)"

.PP
Definition at line 1093 of file wrapper\&.cpp\&.
.SS "struct xml_node* dtsgui_treenodegetxml (\fBdtsgui_treenode\fPtn, char **buf)\fC [read]\fP"

.PP
Definition at line 777 of file wrapper\&.cpp\&.
.SS "void dtsgui_xmlcheckbox (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *checkval, const char *uncheckval, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"

.PP
Definition at line 1133 of file wrapper\&.cpp\&.
.SS "struct \fBform_item\fP* dtsgui_xmlcombobox (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)\fC [read]\fP"

.PP
Definition at line 1143 of file wrapper\&.cpp\&.
.SS "struct \fBform_item\fP* dtsgui_xmllistbox (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)\fC [read]\fP"

.PP
Definition at line 1138 of file wrapper\&.cpp\&.
.SS "void dtsgui_xmlpasswdbox (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"

.PP
Definition at line 1128 of file wrapper\&.cpp\&.
.SS "void dtsgui_xmltextbox (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"

.PP
Definition at line 1118 of file wrapper\&.cpp\&.
.SS "void dtsgui_xmltextbox_multi (\fBdtsgui_pane\fPpane, const char *title, const char *name, const char *xpath, const char *node, const char *fattr, const char *fval, const char *attr)"

.PP
Definition at line 1123 of file wrapper\&.cpp\&.
.SS "void dtsgui_xnode_checkbox (\fBdtsgui_pane\fPpane, const char *title, const char *checkval, const char *uncheckval, const char *attr)"

.SS "struct \fBform_item\fP* dtsgui_xnode_combobox (\fBdtsgui_pane\fPpane, const char *title, const char *attr)\fC [read]\fP"

.SS "struct \fBform_item\fP* dtsgui_xnode_listbox (\fBdtsgui_pane\fPpane, const char *title, const char *attr)\fC [read]\fP"

.SS "void dtsgui_xnode_passwdbox (\fBdtsgui_pane\fPpane, const char *title, const char *attr)"

.SS "void dtsgui_xnode_textbox (\fBdtsgui_pane\fPpane, const char *title, const char *attr)"

.SS "void dtsgui_xnode_textbox_multi (\fBdtsgui_pane\fPpane, const char *title, const char *attr)"

.SH "Author"
.PP 
Generated automatically by Doxygen for DTS Application wxWidgets GUI Library from the source code\&.
