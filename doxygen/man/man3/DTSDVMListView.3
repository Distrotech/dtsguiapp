.TH "DTSDVMListView" 3 "Fri Oct 11 2013" "Version 0.00" "DTS Application wxWidgets GUI Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DTSDVMListView \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DTSListView\&.h>\fP
.PP
Inherits wxDataViewModel\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDTSDVMListView\fP (int cols=1, bool cont_cols=true)"
.br
.ti -1c
.RI "\fB~DTSDVMListView\fP ()"
.br
.ti -1c
.RI "virtual bool \fBIsContainer\fP (const wxDataViewItem &item) const "
.br
.ti -1c
.RI "virtual wxDataViewItem \fBGetParent\fP (const wxDataViewItem &item) const "
.br
.ti -1c
.RI "virtual unsigned int \fBGetChildren\fP (const wxDataViewItem &parent, wxDataViewItemArray &items) const "
.br
.ti -1c
.RI "virtual unsigned int \fBGetColumnCount\fP () const "
.br
.ti -1c
.RI "virtual bool \fBHasContainerColumns\fP (const wxDataViewItem &item) const "
.br
.ti -1c
.RI "virtual wxString \fBGetColumnType\fP (unsigned int col) const "
.br
.ti -1c
.RI "virtual void \fBGetValue\fP (wxVariant &variant, const wxDataViewItem &item, unsigned int col) const "
.br
.ti -1c
.RI "virtual bool \fBSetValue\fP (const wxVariant &variant, const wxDataViewItem &item, unsigned int col)"
.br
.ti -1c
.RI "\fBDTSDVMListStore\fP * \fBGetRoot\fP ()"
.br
.ti -1c
.RI "\fBDTSDVMListStore\fP * \fBSetRoot\fP (const wxString &title, int nodeid=-1, \fBdtsgui_treeviewpanel_cb\fP p_cb=NULL, void *userdata=NULL)"
.br
.ti -1c
.RI "void \fBDelete\fP (const wxDataViewItem &item)"
.br
.ti -1c
.RI "void \fBDeleteAll\fP (void)"
.br
.ti -1c
.RI "void \fBSortChildren\fP (const wxDataViewItem &parent)"
.br
.ti -1c
.RI "int \fBGetChildCount\fP (wxDataViewItem &parent)"
.br
.ti -1c
.RI "wxDataViewItem \fBGetNthChild\fP (wxDataViewItem &parent, size_t idx)"
.br
.ti -1c
.RI "void \fBSetExpanded\fP (const wxDataViewItem &node, bool expanded=true)"
.br
.ti -1c
.RI "virtual unsigned int \fBGetContainers\fP (const wxDataViewItem &parent, wxDataViewItemArray &items, bool exonly=false) const "
.br
.ti -1c
.RI "void \fBMoveChildUp\fP (const wxDataViewItem &node)"
.br
.ti -1c
.RI "void \fBMoveChildDown\fP (const wxDataViewItem &node)"
.br
.ti -1c
.RI "void * \fBGetUserData\fP (const wxDataViewItem &node)"
.br
.ti -1c
.RI "int \fBGetNodeID\fP (const wxDataViewItem &node)"
.br
.ti -1c
.RI "void \fBSetXMLData\fP (const wxDataViewItem &node, struct xml_node *xnode, const char *tattr)"
.br
.ti -1c
.RI "struct xml_node * \fBGetXMLData\fP (const wxDataViewItem &node, char **buff)"
.br
.ti -1c
.RI "const wxString \fBGetTitle\fP (const wxDataViewItem &node)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBDTSDVMListStore\fP * \fBroot\fP"
.br
.ti -1c
.RI "bool \fBhascontcol\fP"
.br
.ti -1c
.RI "int \fBcolcnt\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 69 of file DTSListView\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "DTSDVMListView::DTSDVMListView (intcols = \fC1\fP, boolcont_cols = \fCtrue\fP)"

.PP
Definition at line 247 of file DTSListView\&.cpp\&.
.PP
References colcnt, hascontcol, and root\&.
.PP
.nf
                                                       {
    hascontcol = cont_cols;
    root = NULL;
    colcnt = cols;
}
.fi
.SS "DTSDVMListView::~DTSDVMListView ()"

.PP
Definition at line 253 of file DTSListView\&.cpp\&.
.PP
References DeleteAll()\&.
.PP
.nf
                                {
    DeleteAll();
}
.fi
.SH "Member Function Documentation"
.PP 
.SS "void DTSDVMListView::Delete (const wxDataViewItem &item)"

.PP
Definition at line 341 of file DTSListView\&.cpp\&.
.PP
References DeleteAll(), DTSDVMListStore::GetParent(), DTSDVMListStore::GetXMLData(), and DTSDVMListStore::RemoveChildReference()\&.
.PP
Referenced by DTSTreeWindowEvent::MenuEvent()\&.
.PP
.nf
                                                      {
    DTSDVMListStore *node;
    wxDataViewItem parent;
    struct xml_node *xn;

    node = (DTSDVMListStore*)item\&.GetID();
    if (!node) {
        return;
    }

    parent = wxDataViewItem(node->GetParent());
    if (!parent\&.IsOk()) {
        DeleteAll();
        return;
    }

    if ((xn = node->GetXMLData(NULL))) {
        xml_delete(xn);
        objunref(xn);
    }

    node->GetParent()->RemoveChildReference(node);
    delete node;
    ItemDeleted(parent, item);
}
.fi
.SS "void DTSDVMListView::DeleteAll (void)"

.PP
Definition at line 367 of file DTSListView\&.cpp\&.
.PP
References root\&.
.PP
Referenced by DTSDVMCtrl::AssociateModel(), Delete(), DTSDVMCtrl::~DTSDVMCtrl(), and ~DTSDVMListView()\&.
.PP
.nf
                                   {
    if (!root) {
        return;
    }

    delete root;
    root = NULL;
    Cleared();
}
.fi
.SS "int DTSDVMListView::GetChildCount (wxDataViewItem &parent)"

.PP
Definition at line 391 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetChildCount(), and root\&.
.PP
Referenced by DTSTreeWindowEvent::TreeEvent()\&.
.PP
.nf
                                                        {
    DTSDVMListStore *entry;
    bool nok;

    nok = parent\&.IsOk();
    if (nok && (entry = (DTSDVMListStore*)parent\&.GetID())) {
        return entry->GetChildCount();
    } else if (root && !nok) {
        return root->GetChildCount();
    } else {
        return 0;
    }
}
.fi
.SS "unsigned int DTSDVMListView::GetChildren (const wxDataViewItem &parent, wxDataViewItemArray &items) const\fC [virtual]\fP"

.PP
Definition at line 281 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetChildren(), and root\&.
.PP
Referenced by MoveChildDown(), MoveChildUp(), and SortChildren()\&.
.PP
.nf
                                                                                                       {
    DTSDVMListStore *node;
    bool nok;

    nok = parent\&.IsOk();
    node = (DTSDVMListStore*)parent\&.GetID();

    if (!nok && !node) {
        if (root) {
            items\&.Add(wxDataViewItem((void*)root));
            return 1;
        } else {
            return 0;
        }
    } else {
        return node->GetChildren(items);
    }
}
.fi
.SS "unsigned int DTSDVMListView::GetColumnCount () const\fC [virtual]\fP"

.PP
Definition at line 300 of file DTSListView\&.cpp\&.
.PP
References colcnt\&.
.PP
.nf
                                                  {
    return colcnt;
}
.fi
.SS "wxString DTSDVMListView::GetColumnType (unsigned intcol) const\fC [virtual]\fP"

.PP
Definition at line 308 of file DTSListView\&.cpp\&.
.PP
.nf
                                                             {
    return wxT('string');
}
.fi
.SS "unsigned int DTSDVMListView::GetContainers (const wxDataViewItem &parent, wxDataViewItemArray &items, boolexonly = \fCfalse\fP) const\fC [virtual]\fP"

.PP
Definition at line 436 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetContainers(), and root\&.
.PP
Referenced by DTSTreeWindowEvent::SortParent()\&.
.PP
.nf
                                                                                                                      {
    DTSDVMListStore *node;
    bool nok;

    nok = parent\&.IsOk();
    node = (DTSDVMListStore*)parent\&.GetID();

    if (!nok && !node) {
        if (root) {
            items\&.Add(wxDataViewItem((void*)root));
            return 1;
        } else {
            return 0;
        }
    } else {
        return node->GetContainers(items, exonly);
    }
}
.fi
.SS "int DTSDVMListView::GetNodeID (const wxDataViewItem &node)"

.PP
Definition at line 507 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetNodeID(), and root\&.
.PP
Referenced by DTSTreeWindow::CreatePane(), and DTSTreeWindowEvent::TreeEvent()\&.
.PP
.nf
                                                        {
    DTSDVMListStore *data;

    if (!node\&.IsOk() && root) {
        return root->GetNodeID();
    } else if ((data = (DTSDVMListStore*)node\&.GetID())) {
        return data->GetNodeID();
    } else {
        return -1;
    }
}
.fi
.SS "wxDataViewItem DTSDVMListView::GetNthChild (wxDataViewItem &parent, size_tidx)"

.PP
Definition at line 405 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetNthChild(), and root\&.
.PP
Referenced by DTSTreeWindowEvent::TreeEvent()\&.
.PP
.nf
                                                                             {
    DTSDVMListStore *entry, *li;
    bool nok;

    nok = parent\&.IsOk();
    entry = (DTSDVMListStore*)parent\&.GetID();

    if (nok && entry) {
        li = entry->GetNthChild(idx);
    } else if (!nok && root) {
        li = root->GetNthChild(idx);
    } else {
        li = NULL;
    }
    return wxDataViewItem(li);
}
.fi
.SS "wxDataViewItem DTSDVMListView::GetParent (const wxDataViewItem &item) const\fC [virtual]\fP"

.PP
Definition at line 266 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetParent(), and root\&.
.PP
Referenced by DTSTreeWindowEvent::MenuEvent(), and DTSTreeWindowEvent::TreeEvent()\&.
.PP
.nf
                                                                         {
    DTSDVMListStore *node;

    if (!item\&.IsOk()) {
        return wxDataViewItem(NULL);
    }

    node = (DTSDVMListStore*)item\&.GetID();
    if (!node || (node == root)){
        return wxDataViewItem(NULL);
    }

    return wxDataViewItem((void*)node->GetParent());
}
.fi
.SS "\fBDTSDVMListStore\fP * DTSDVMListView::GetRoot ()"

.PP
Definition at line 332 of file DTSListView\&.cpp\&.
.PP
References root\&.
.PP
Referenced by DTSDVMCtrl::AppendNode(), and DTSTreeWindow::Show()\&.
.PP
.nf
                                         {
    return root;
}
.fi
.SS "const wxString DTSDVMListView::GetTitle (const wxDataViewItem &node)"

.PP
Definition at line 540 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetTitle(), and root\&.
.PP
Referenced by DTSTreeWindow::CreatePane()\&.
.PP
.nf
                                                                  {
    DTSDVMListStore *data;

    if (!node\&.IsOk() && root) {
        return root->GetTitle();
    } else if ((data = (DTSDVMListStore*)node\&.GetID())) {
        return data->GetTitle();
    }
    return wxEmptyString;
}
.fi
.SS "void * DTSDVMListView::GetUserData (const wxDataViewItem &node)"

.PP
Definition at line 495 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetUserData(), and root\&.
.PP
.nf
                                                            {
    DTSDVMListStore *data;

    if (!node\&.IsOk() && root) {
        return root->GetUserData();
    } else if ((data = (DTSDVMListStore*)node\&.GetID())) {
        return data->GetUserData();
    } else {
        return NULL;
    }
}
.fi
.SS "void DTSDVMListView::GetValue (wxVariant &variant, const wxDataViewItem &item, unsigned intcol) const\fC [virtual]\fP"

.PP
Definition at line 312 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetTitle()\&.
.PP
.nf
                                                                                                    {
    DTSDVMListStore *node = (DTSDVMListStore*)item\&.GetID();

    if (col == 0) {
        variant = node->GetTitle();
    }
}
.fi
.SS "struct xml_node * DTSDVMListView::GetXMLData (const wxDataViewItem &node, char **buff)\fC [read]\fP"

.PP
Definition at line 529 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetXMLData(), and root\&.
.PP
Referenced by DTSTreeWindow::UpdateNodeXML()\&.
.PP
.nf
                                                                                  {
    DTSDVMListStore *data;

    if (!node\&.IsOk() && root) {
        return root->GetXMLData(buf);
    } else if ((data = (DTSDVMListStore*)node\&.GetID())) {
        return data->GetXMLData(buf);
    }
    return NULL;
}
.fi
.SS "bool DTSDVMListView::HasContainerColumns (const wxDataViewItem &item) const\fC [virtual]\fP"

.PP
Definition at line 304 of file DTSListView\&.cpp\&.
.PP
References hascontcol\&.
.PP
.nf
                                                                         {
    return hascontcol;
}
.fi
.SS "bool DTSDVMListView::IsContainer (const wxDataViewItem &item) const\fC [virtual]\fP"

.PP
Definition at line 257 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::IsContainer()\&.
.PP
Referenced by DTSTreeWindow::Select(), and DTSTreeWindowEvent::TreeEvent()\&.
.PP
.nf
                                                                 {
    if (!item\&.IsOk()) {
        return true;
    }

    DTSDVMListStore *node = (DTSDVMListStore*)item\&.GetID();
    return node->IsContainer();
}
.fi
.SS "void DTSDVMListView::MoveChildDown (const wxDataViewItem &node)"

.PP
Definition at line 475 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetChildIndex(), GetChildren(), DTSDVMListStore::GetParent(), and DTSDVMListStore::MoveChildDown()\&.
.PP
Referenced by DTSTreeWindowEvent::SortParent()\&.
.PP
.nf
                                                             {
    DTSDVMListStore *data, *parent;
    wxDataViewItem pnode;
    wxDataViewItemArray items;

    data = (DTSDVMListStore*)node\&.GetID();
    if (!data || !node\&.IsOk()) {
        return;
    }
    parent = data->GetParent();
    pnode = wxDataViewItem(parent);

    if (parent) {
        parent->MoveChildDown(parent->GetChildIndex(data));
        GetChildren(pnode, items);
        ItemsDeleted(pnode, items);
        ItemsAdded(pnode, items);
    }
}
.fi
.SS "void DTSDVMListView::MoveChildUp (const wxDataViewItem &node)"

.PP
Definition at line 455 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::GetChildIndex(), GetChildren(), DTSDVMListStore::GetParent(), and DTSDVMListStore::MoveChildUp()\&.
.PP
Referenced by DTSTreeWindowEvent::SortParent()\&.
.PP
.nf
                                                           {
    DTSDVMListStore *data, *parent;
    wxDataViewItem pnode;
    wxDataViewItemArray items;

    data = (DTSDVMListStore*)node\&.GetID();
    if (!data || !node\&.IsOk()) {
        return;
    }
    parent = data->GetParent();
    pnode = wxDataViewItem(parent);

    if (parent) {
        parent->MoveChildUp(parent->GetChildIndex(data));
        GetChildren(pnode, items);
        ItemsDeleted(pnode, items);
        ItemsAdded(pnode, items);
    }
}
.fi
.SS "void DTSDVMListView::SetExpanded (const wxDataViewItem &node, boolexpanded = \fCtrue\fP)"

.PP
Definition at line 422 of file DTSListView\&.cpp\&.
.PP
References root, and DTSDVMListStore::SetExpanded()\&.
.PP
Referenced by DTSTreeWindowEvent::SortParent()\&.
.PP
.nf
                                                                          {
    DTSDVMListStore *entry;
    bool nok;

    nok = node\&.IsOk();
    entry = (DTSDVMListStore*)node\&.GetID();

    if (nok && entry) {
        entry->SetExpanded(expanded);
    } else if (!nok && root) {
        root->SetExpanded();
    }
}
.fi
.SS "\fBDTSDVMListStore\fP * DTSDVMListView::SetRoot (const wxString &title, intnodeid = \fC-1\fP, \fBdtsgui_treeviewpanel_cb\fPp_cb = \fCNULL\fP, void *userdata = \fCNULL\fP)"

.PP
Definition at line 336 of file DTSListView\&.cpp\&.
.PP
References root\&.
.PP
Referenced by DTSDVMCtrl::AppendNode()\&.
.PP
.nf
                                                                                                                        {
    root = new DTSDVMListStore(NULL, true, title, nodeid, p_cb, userdata);
    return root;
}
.fi
.SS "bool DTSDVMListView::SetValue (const wxVariant &variant, const wxDataViewItem &item, unsigned intcol)\fC [virtual]\fP"

.PP
Definition at line 320 of file DTSListView\&.cpp\&.
.PP
References DTSDVMListStore::SetTitle()\&.
.PP
.nf
                                                                                                    {
    assert(item\&.IsOk());
    DTSDVMListStore *node = (DTSDVMListStore*) item\&.GetID();

    if (col == 0) {
        node->SetTitle(variant\&.GetString());
        return true;
    }

    return false;
}
.fi
.SS "void DTSDVMListView::SetXMLData (const wxDataViewItem &node, struct xml_node *xnode, const char *tattr)"

.PP
Definition at line 519 of file DTSListView\&.cpp\&.
.PP
References root, and DTSDVMListStore::SetXMLData()\&.
.PP
.nf
                                                                                                     {
    DTSDVMListStore *data;

    if (!node\&.IsOk() && root) {
        root->SetXMLData(xnode, tattr);
    } else if ((data = (DTSDVMListStore*)node\&.GetID())) {
        data->SetXMLData(xnode, tattr);
    }
}
.fi
.SS "void DTSDVMListView::SortChildren (const wxDataViewItem &parent)"

.PP
Definition at line 377 of file DTSListView\&.cpp\&.
.PP
References GetChildren(), and DTSDVMListStore::SortChildren()\&.
.PP
Referenced by DTSDVMCtrl::Sort(), and DTSTreeWindowEvent::SortParent()\&.
.PP
.nf
                                                              {
    DTSDVMListStore *node = (DTSDVMListStore*)parent\&.GetID();
    wxDataViewItemArray items;

    if (!node) {
        return;
    }

    node->SortChildren();
    GetChildren(parent, items);
    ItemsDeleted(parent, items);
    ItemsAdded(parent, items);
}
.fi
.SH "Member Data Documentation"
.PP 
.SS "int DTSDVMListView::colcnt\fC [protected]\fP"

.PP
Definition at line 102 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMListView(), and GetColumnCount()\&.
.SS "bool DTSDVMListView::hascontcol\fC [protected]\fP"

.PP
Definition at line 101 of file DTSListView\&.h\&.
.PP
Referenced by DTSDVMListView(), and HasContainerColumns()\&.
.SS "\fBDTSDVMListStore\fP* DTSDVMListView::root\fC [protected]\fP"

.PP
Definition at line 100 of file DTSListView\&.h\&.
.PP
Referenced by DeleteAll(), DTSDVMListView(), GetChildCount(), GetChildren(), GetContainers(), GetNodeID(), GetNthChild(), GetParent(), GetRoot(), GetTitle(), GetUserData(), GetXMLData(), SetExpanded(), SetRoot(), and SetXMLData()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for DTS Application wxWidgets GUI Library from the source code\&.
