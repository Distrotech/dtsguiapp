.TH "DTSTabWindow" 3 "Fri Oct 11 2013" "Version 0.00" "DTS Application wxWidgets GUI Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DTSTabWindow \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DTSTreeWindow\&.h>\fP
.PP
Inherits \fBDTSObject\fP, and wxNotebook\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDTSTabWindow\fP (\fBDTSFrame\fP *\fBframe\fP=NULL, wxString stat_msg=wxEmptyString, void *u_data=NULL)"
.br
.ti -1c
.RI "\fB~DTSTabWindow\fP ()"
.br
.ti -1c
.RI "\fBDTSTabPage\fP * \fBCreateTab\fP (const wxString &name, int butmask=0, void *\fBuserdata\fP=NULL, \fBdtsgui_tabpanel_cb\fP cb=NULL, void *cdata=NULL, struct xml_doc *\fBxmldoc\fP=NULL, bool addpage=true)"
.br
.ti -1c
.RI "\fBDTSTabPage\fP * \fBCreateTab\fP (const wxString &name, int butmask, void *\fBuserdata\fP, \fBdtsgui_tabpanel_cb\fP cb, void *cdata, struct xml_doc *\fBxmldoc\fP, int pos, int undo)"
.br
.ti -1c
.RI "void \fBInsertTab\fP (\fBDTSTabPage\fP *\fBpanel\fP, int pos, bool show=true, int undo=0)"
.br
.ti -1c
.RI "void \fBUndo\fP (int pg)"
.br
.ti -1c
.RI "bool \fBShow\fP (bool=true)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Definition at line 149 of file DTSTreeWindow\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "DTSTabWindow::DTSTabWindow (\fBDTSFrame\fP *frame = \fCNULL\fP, wxStringstat_msg = \fCwxEmptyString\fP, void *u_data = \fCNULL\fP)"

.PP
Definition at line 888 of file DTSTreeWindow\&.cpp\&.
.PP
References DTSObject::dtsevthandler, DTSObject::frame, DTSObject::panel, DTSTabWindowEvent::RightMenu(), Show(), DTSObject::type, DTSObject::userdata, and wx_DTSPANEL_TAB\&.
.PP
.nf
    :wxNotebook((wxWindow*)frame, -1),
    DTSObject(stat_msg) {

    DTSTabWindowEvent *dtsevt;
    wxNotebook *nb = (wxNotebook*)this;

    panel = dynamic_cast<wxBookCtrlBase*>(this);

    type = wx_DTSPANEL_TAB;
    this->frame = frame;

    if (u_data && objref(u_data)) {
        userdata = u_data;
    }

    dtsevt = new DTSTabWindowEvent(userdata, this);
    dtsevthandler = dtsevt;

    nb->Bind(wxEVT_CONTEXT_MENU, &DTSTabWindowEvent::RightMenu, dtsevt);

    Show(false);
}
.fi
.SS "DTSTabWindow::~DTSTabWindow ()"

.PP
Definition at line 912 of file DTSTreeWindow\&.cpp\&.
.PP
References DTSObject::userdata\&.
.PP
.nf
                            {
    if (userdata) {
        objunref(userdata);
    }
}
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBDTSTabPage\fP * DTSTabWindow::CreateTab (const wxString &name, intbutmask = \fC0\fP, void *userdata = \fCNULL\fP, \fBdtsgui_tabpanel_cb\fPcb = \fCNULL\fP, void *cdata = \fCNULL\fP, struct xml_doc *xmldoc = \fCNULL\fP, booladdpage = \fCtrue\fP)"

.PP
Definition at line 991 of file DTSTreeWindow\&.cpp\&.
.PP
References DTSObject::GetFrame(), DTSObject::GetPanel(), and DTSObject::SetUserData()\&.
.PP
Referenced by CreateTab(), DTS_C_API::dtsgui_newtabpage(), DTS_C_API::dtsgui_tabpage_insert(), and tab_newpane::handle_newtabpane()\&.
.PP
.nf
                                                                                                                                                               {
    DTSTabPage *dp;
    DTSFrame *f;
    wxBookCtrlBase *nb;

    f = GetFrame();
    nb = static_cast<wxBookCtrlBase*>(this);

    if (!(dp = new DTSTabPage(nb, f, name, butmask, cb, cdata, xmldoc))) {
        return NULL;
    }

    if (userdata) {
        dp->SetUserData(userdata);
    }

    if (addpage) {
        nb->AddPage(dp->GetPanel(), name);
    }

    return dp;
}
.fi
.SS "\fBDTSTabPage\fP * DTSTabWindow::CreateTab (const wxString &name, intbutmask, void *userdata, \fBdtsgui_tabpanel_cb\fPcb, void *cdata, struct xml_doc *xmldoc, intpos, intundo)"

.PP
Definition at line 981 of file DTSTreeWindow\&.cpp\&.
.PP
References CreateTab(), and InsertTab()\&.
.PP
.nf
                                                                                                                                                                    {
    DTSTabPage *dp;

    dp = CreateTab(name, butmask, userdata, cb, cdata, xmldoc, false);
    InsertTab(dp, pos, true, undo);

    return dp;
}
.fi
.SS "void DTSTabWindow::InsertTab (\fBDTSTabPage\fP *panel, intpos, boolshow = \fCtrue\fP, intundo = \fC0\fP)"

.PP
Definition at line 1014 of file DTSTreeWindow\&.cpp\&.
.PP
References DTSObject::GetName(), DTSObject::GetPanel(), DTSObject::panel, DTSObject::refobj, and Undo()\&.
.PP
Referenced by CreateTab(), tab_newpane::handle_newtabpane(), and Undo()\&.
.PP
.nf
                                                                           {
    wxBookCtrlBase *nb = dynamic_cast<wxBookCtrlBase*>(this);
    DTSObject *dp = static_cast<DTSObject*>(panel);
    wxWindow *w = panel->GetPanel();

    objlock(refobj);
    nb->InsertPage(pos, w, dp->GetName());
    objunlock(refobj);
    w->Show(true);

    if (sel) {
        SetSelection(pos);
    }
    if (undo) {
        Undo(undo);
    }
}
.fi
.SS "bool DTSTabWindow::Show (boolshow = \fCtrue\fP)"

.PP
Definition at line 941 of file DTSTreeWindow\&.cpp\&.
.PP
References DTSObject::beenshown, DTSTabPage::ConfigPane(), DTSObject::dtsevthandler, DTSObject::frame, DTSTabWindowEvent::OnButton(), DTSTabWindowEvent::PageChange(), DTSTabWindowEvent::PageChanged(), and DTSObject::status\&.
.PP
Referenced by DTSTabWindow()\&.
.PP
.nf
                                 {
    wxNotebook *nb = (wxNotebook*)this;
    DTSTabWindowEvent *dtsevt = (DTSTabWindowEvent*)dtsevthandler;
    wxWindow *w;
    int i, cnt;
    bool res;
#ifdef __WIN32
    DTSTabPage *tp;
#endif // __WIN32

    if (show && frame) {
        frame->SetStatusText(status);
    }

    res = wxNotebook::Show(show);

    if (!beenshown && show && res) {
        cnt = GetPageCount();
        for(i = 0; i < cnt;i++) {
            w = GetPage(i);
#ifdef __WIN32
            tp = dynamic_cast<DTSTabPage*>(w);
            tp->ConfigPane();
            w->Show(true);
            if (i) {
                w->Show(false);
            }
#else
            w->Show(true);
#endif // __WIN32
        }
        beenshown = true;
        nb->Bind(wxEVT_NOTEBOOK_PAGE_CHANGING, &DTSTabWindowEvent::PageChange, dtsevt);
        nb->Bind(wxEVT_NOTEBOOK_PAGE_CHANGED, &DTSTabWindowEvent::PageChanged, dtsevt);
        nb->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &DTSTabWindowEvent::OnButton, dtsevt);

    }
    return res;
}
.fi
.SS "void DTSTabWindow::Undo (intpg)"

.PP
Definition at line 919 of file DTSTreeWindow\&.cpp\&.
.PP
References InsertTab()\&.
.PP
Referenced by tab_newpane::handle_newtabpane(), InsertTab(), and DTSTabWindowEvent::OnButton()\&.
.PP
.nf
                              {
    DTSTabPage *pane, *newp;
    int idx;

    if (pg == 0) {
        return;
    } else if (pg > 0) {
        idx = pg-1;
    } else {
        idx = GetPageCount() + pg;
    }

    pane = dynamic_cast<DTSTabPage*>(GetPage(idx));
    RemovePage(idx);

    newp = new DTSTabPage(this);
    *newp = *pane;
    delete pane;

    InsertTab(newp, idx);
}
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for DTS Application wxWidgets GUI Library from the source code\&.
