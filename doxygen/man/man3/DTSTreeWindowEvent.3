.TH "DTSTreeWindowEvent" 3 "Fri Oct 11 2013" "Version 0.00" "DTS Application wxWidgets GUI Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DTSTreeWindowEvent \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DTSTreeWindow\&.h>\fP
.PP
Inherits wxEvtHandler\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDTSTreeWindowEvent\fP (void *userdata=NULL, \fBdtsgui_tree_cb\fP tree_cb=NULL, class \fBdtsgui\fP *\fBdtsgui\fP=NULL, \fBDTSTreeWindow\fP *win=NULL)"
.br
.ti -1c
.RI "\fB~DTSTreeWindowEvent\fP ()"
.br
.ti -1c
.RI "void \fBTreeEvent\fP (wxDataViewEvent &event)"
.br
.ti -1c
.RI "void \fBOnButton\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "void \fBMenuEvent\fP (wxCommandEvent &event)"
.br
.ti -1c
.RI "void \fBSplitterEvent\fP (wxSplitterEvent &event)"
.br
.ti -1c
.RI "void \fBTreeCallback\fP (const wxDataViewItem item, enum \fBtree_cbtype\fP cbtype)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBSortParent\fP (const wxDataViewItem \fBparent\fP, int action)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "void * \fBdata\fP"
.br
.ti -1c
.RI "\fBdtsgui_tree_cb\fP \fBtreecb\fP"
.br
.ti -1c
.RI "\fBDTSTreeWindow\fP * \fBparent\fP"
.br
.ti -1c
.RI "\fBDTSDVMListView\fP * \fBvm\fP"
.br
.ti -1c
.RI "\fBDTSDVMCtrl\fP * \fBtree\fP"
.br
.ti -1c
.RI "wxDataViewItem \fBa_item\fP"
.br
.ti -1c
.RI "wxDataViewItem \fBa_cont\fP"
.br
.ti -1c
.RI "class \fBdtsgui\fP * \fBdtsgui\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 87 of file DTSTreeWindow\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "DTSTreeWindowEvent::DTSTreeWindowEvent (void *userdata = \fCNULL\fP, \fBdtsgui_tree_cb\fPtree_cb = \fCNULL\fP, class \fBdtsgui\fP *dtsgui = \fCNULL\fP, \fBDTSTreeWindow\fP *win = \fCNULL\fP)"

.PP
Definition at line 295 of file DTSTreeWindow\&.cpp\&.
.PP
References data, dtsgui, DTSDVMCtrl::GetStore(), DTSTreeWindow::GetTreeCtrl(), parent, tree, treecb, and vm\&.
.PP
.nf
                                                                                                                       {
    if (userdata && objref(userdata)) {
        data = userdata;
    } else {
        data = NULL;
    }
    treecb = tree_cb;
    parent = win;
    tree = win->GetTreeCtrl();
    vm = tree->GetStore();
    if (dtsgui && objref(dtsgui)) {
        this->dtsgui = dtsgui;
    } else {
        this->dtsgui = NULL;
    }
}
.fi
.SS "DTSTreeWindowEvent::~DTSTreeWindowEvent ()"

.PP
Definition at line 312 of file DTSTreeWindow\&.cpp\&.
.PP
References data\&.
.PP
.nf
                                        {
    if (dtsgui) {
        objunref(dtsgui);
    }
    if (data) {
        objunref(data);
    }
}
.fi
.SH "Member Function Documentation"
.PP 
.SS "void DTSTreeWindowEvent::MenuEvent (wxCommandEvent &event)"

.PP
Definition at line 445 of file DTSTreeWindow\&.cpp\&.
.PP
References a_cont, a_item, DTSFrame::Confirm(), DTSDVMListView::Delete(), DTS_TREEWIN_MENU_DELETE, DTS_TREEWIN_MENU_MOVEDOWN, DTS_TREEWIN_MENU_MOVEUP, DTS_TREEWIN_MENU_SORT, DTSGUI_TREE_CB_DELETE, DTSGUI_TREE_CB_SELECT, DTSObject::GetFrame(), DTSDVMListView::GetParent(), parent, SortParent(), tree, TreeCallback(), and vm\&.
.PP
Referenced by DTSTreeWindow::DTSTreeWindow()\&.
.PP
.nf
                                                        {
    enum treewinmenu eid;
    wxDataViewItem p_cont;
    DTSFrame *frame;

    eid=(treewinmenu)event\&.GetId();
    switch(eid) {
        case DTS_TREEWIN_MENU_MOVEDOWN:
        case DTS_TREEWIN_MENU_MOVEUP:
        case DTS_TREEWIN_MENU_SORT:
            p_cont = (a_cont == a_item) ? vm->GetParent(a_cont) : a_cont;
            SortParent(p_cont, eid);
            break;
        case DTS_TREEWIN_MENU_DELETE:
            frame = parent->GetFrame();
            if (frame->Confirm('Are you sure you want to delete this item')) {
                p_cont = vm->GetParent(a_item);
                tree->Select(p_cont);
                TreeCallback(p_cont, DTSGUI_TREE_CB_SELECT);
                TreeCallback(a_item, DTSGUI_TREE_CB_DELETE);
                vm->Delete(a_item);
            }
            break;
    }
}
.fi
.SS "void DTSTreeWindowEvent::OnButton (wxCommandEvent &event)"

.PP
Definition at line 524 of file DTSTreeWindow\&.cpp\&.
.PP
References DTSTreeWindow::GetActiveNode(), DTSTreeWindow::GetClientPane(), parent, DTSTreeWindow::Select(), DTSPanel::Update_XML(), wx_PANEL_EVENT_BUTTON_NO, and wx_PANEL_EVENT_BUTTON_YES\&.
.PP
Referenced by DTSTreeWindow::DTSTreeWindow()\&.
.PP
.nf
                                                       {
    dtsgui_treenode tn = parent->GetActiveNode();
    wxDataViewItem item;
    int eid = event\&.GetId();
    DTSPanel *pane = parent->GetClientPane();

    switch(eid) {
        case wx_PANEL_EVENT_BUTTON_YES:
            pane->Update_XML();
            break;
        case wx_PANEL_EVENT_BUTTON_NO:
            item = wxDataViewItem(tn);
            parent->Select(item);
            return;
        default:
            break;
    }
    event\&.Skip(true);
}
.fi
.SS "void DTSTreeWindowEvent::SortParent (const wxDataViewItemparent, intaction)\fC [private]\fP"

.PP
Definition at line 396 of file DTSTreeWindow\&.cpp\&.
.PP
References a_cont, a_item, data, DTS_TREEWIN_MENU_MOVEDOWN, DTS_TREEWIN_MENU_MOVEUP, DTS_TREEWIN_MENU_SORT, DTSDVMListView::GetContainers(), DTSDVMListStore::IsExpanded(), DTSDVMListView::MoveChildDown(), DTSDVMListView::MoveChildUp(), DTSDVMListStore::SetExpanded(), DTSDVMListView::SetExpanded(), DTSDVMListView::SortChildren(), tree, and vm\&.
.PP
Referenced by MenuEvent()\&.
.PP
.nf
                                                                           {
    wxDataViewItemArray expanded, selected;
    DTSDVMListStore *data;
    unsigned int cont_cnt, cnt;

    /* Get enabled/selection state of parent*/
    tree->GetSelections(selected);

    /*mark expanded containers*/
    vm->SetExpanded(parent, tree->IsExpanded(parent));
    cont_cnt = vm->GetContainers(parent, expanded, false);
    for (cnt=0; cnt < cont_cnt;cnt++) {
        vm->SetExpanded(expanded[cnt], tree->IsExpanded(expanded[cnt]));
    }

    switch(action) {
        case DTS_TREEWIN_MENU_MOVEDOWN:
            vm->MoveChildDown(a_item);
            break;
        case DTS_TREEWIN_MENU_MOVEUP:
            vm->MoveChildUp(a_item);
            break;
        case DTS_TREEWIN_MENU_SORT:
            vm->SortChildren(a_cont);
            break;
    }

    /*re select all selected*/
    for (cnt=0; cnt < selected\&.size();cnt++) {
        tree->Select(wxDataViewItem(selected[cnt]));
    }

    /*expand root if was expanded*/
    data = (DTSDVMListStore*)parent\&.GetID();
    if (data && data->IsExpanded()) {
        tree->Expand(parent);
        data->SetExpanded(false);
    }

    /*re expand containers colapsed*/
    for (cnt=0; cnt < expanded\&.size();cnt++) {
        data = (DTSDVMListStore*)expanded[cnt]\&.GetID();
        if (data && data->IsExpanded()) {
            tree->Expand(expanded[cnt]);
            data->SetExpanded(false);
        }
    }
}
.fi
.SS "void DTSTreeWindowEvent::SplitterEvent (wxSplitterEvent &event)"

.PP
Definition at line 471 of file DTSTreeWindow\&.cpp\&.
.PP
References parent, and DTSTreeWindow::SetTreePaneSize()\&.
.PP
Referenced by DTSTreeWindow::DTSTreeWindow()\&.
.PP
.nf
                                                             {
    DTSTreeWindow *tw;
    int evid;

    tw = (DTSTreeWindow*)parent;
    evid = event\&.GetEventType();

    if (evid == wxEVT_SPLITTER_SASH_POS_CHANGED) {
        tw->SetTreePaneSize();
    }
}
.fi
.SS "void DTSTreeWindowEvent::TreeCallback (const wxDataViewItemitem, enum \fBtree_cbtype\fPcbtype)"

.PP
Definition at line 483 of file DTSTreeWindow\&.cpp\&.
.PP
References DTSDVMListStore::ConfigPanel(), DTSTreeWindow::CreatePane(), data, DTSGUI_TREE_CB_DELETE, DTSGUI_TREE_CB_EDIT, DTSGUI_TREE_CB_SELECT, DTSDVMListStore::GetTitle(), parent, DTSTreeWindow::SetWindow(), treecb, and DTSTreeWindow::UpdateNodeXML()\&.
.PP
Referenced by MenuEvent(), and TreeEvent()\&.
.PP
.nf
                                                                                      {
    void *tdata = NULL;
    DTSPanel *sp = NULL;
    wxWindow *op;
    DTSDVMListStore *ndata = (item\&.IsOk()) ? (DTSDVMListStore*)item\&.GetID() : NULL;

    if (!ndata) {
        return;
    }

    if (objref(data)) {
        tdata = data;
    }

    if (treecb) {
        sp = (DTSPanel*)treecb(dtsgui, parent, ndata, type, ndata->GetTitle()\&.ToUTF8(), tdata);
    } else {
        switch(type) {
            case DTSGUI_TREE_CB_SELECT:
                sp = parent->CreatePane(wxDataViewItem(ndata));
                break;
            case DTSGUI_TREE_CB_EDIT:
                parent->UpdateNodeXML(wxDataViewItem(ndata), ndata->GetTitle());
                break;
            case DTSGUI_TREE_CB_DELETE:
                break;
        }
    }

    if (sp) {
        ndata->ConfigPanel(sp, parent);
        op = parent->SetWindow(sp, item);
        delete op;
    }

    if (tdata) {
        objunref(tdata);
    }

}
.fi
.SS "void DTSTreeWindowEvent::TreeEvent (wxDataViewEvent &event)"

.PP
Definition at line 321 of file DTSTreeWindow\&.cpp\&.
.PP
References a_cont, a_item, DTSDVMListStore::can_delete, DTSDVMListStore::can_edit, DTSDVMListStore::can_sort, data, DTSGUI_TREE_CB_EDIT, DTSGUI_TREE_CB_SELECT, DTSDVMListView::GetChildCount(), DTSDVMListView::GetNodeID(), DTSDVMListView::GetNthChild(), DTSDVMListView::GetParent(), DTSDVMListStore::GetTitle(), DTSDVMListStore::IsContainer(), DTSDVMListView::IsContainer(), parent, DTSTreeWindow::SetPaneTitle(), DTSTreeWindow::ShowRMenu(), tree, TreeCallback(), DTSTreeWindow::TreeResize(), and vm\&.
.PP
Referenced by DTSTreeWindow::DTSTreeWindow()\&.
.PP
.nf
                                                         {
    DTSTreeWindow *tw;
    wxDataViewItem p_cont, f_item, l_item;
    int evid, cnt;
    bool cont,first = true,last = true;

    tw = (DTSTreeWindow*)parent;
    evid = event\&.GetEventType();

    if (evid == wxEVT_DATAVIEW_SELECTION_CHANGED) {
        a_item = event\&.GetItem();
        TreeCallback(a_item, DTSGUI_TREE_CB_SELECT);
        if ((vm->GetNodeID(a_item) == -1) && vm->IsContainer(a_item)) {
            tree->Expand(a_item);
        }
    } else if (evid == wxEVT_DATAVIEW_ITEM_EXPANDED) {
        parent->TreeResize();
    } else if (evid == wxEVT_DATAVIEW_ITEM_CONTEXT_MENU) {
        DTSDVMListStore *d_p, *d_i, *d_c;
        bool c_sort, del;

        if ((a_item = event\&.GetItem())) {
            if (vm->IsContainer(a_item)) {
                a_cont = a_item;
                p_cont = vm->GetParent(a_item);
                cont = true;
            } else {
                a_cont = vm->GetParent(a_item);
                p_cont = a_cont;
                cont = false;
            }

            d_p = (DTSDVMListStore*)p_cont\&.GetID();
            d_c = (DTSDVMListStore*)a_cont\&.GetID();
            cnt=vm->GetChildCount(p_cont);
            if (p_cont && d_p->can_sort && (cnt > 1)) {
                f_item = vm->GetNthChild(p_cont, 0);
                if (f_item != a_item) {
                    first = false;
                }
                l_item = vm->GetNthChild(p_cont, cnt-1);
                if (l_item != a_item) {
                    last = false;
                }
            }

            c_sort = (d_p && d_p->can_sort) || (d_c && d_c->can_sort);

            d_i = (DTSDVMListStore*)a_item\&.GetID();
            del = d_i->can_delete;
            tw->ShowRMenu(cont, vm->GetChildCount(a_cont), first, last, c_sort, del);
        }
    } else if (evid == wxEVT_DATAVIEW_ITEM_START_EDITING) {
        a_item = event\&.GetItem();
        DTSDVMListStore *data = (DTSDVMListStore*)event\&.GetItem()\&.GetID();
        if (!data->can_edit) {
            event\&.Veto();
            if (data->IsContainer()) {
                if (tree->IsExpanded(a_item)) {
                    tree->Collapse(a_item);
                } else {
                    tree->Expand(a_item);
                }
            }
        }
    } else if (evid == wxEVT_DATAVIEW_ITEM_EDITING_DONE) {
#ifndef _WIN32
        DTSDVMListStore *data = (DTSDVMListStore*)event\&.GetItem()\&.GetID();
        event\&.SetValue(data->GetTitle());
#endif
        parent->SetPaneTitle(event\&.GetValue());
        TreeCallback(event\&.GetItem(), DTSGUI_TREE_CB_EDIT);
    }
}
.fi
.SH "Member Data Documentation"
.PP 
.SS "wxDataViewItem DTSTreeWindowEvent::a_cont\fC [private]\fP"

.PP
Definition at line 104 of file DTSTreeWindow\&.h\&.
.PP
Referenced by MenuEvent(), SortParent(), and TreeEvent()\&.
.SS "wxDataViewItem DTSTreeWindowEvent::a_item\fC [private]\fP"

.PP
Definition at line 103 of file DTSTreeWindow\&.h\&.
.PP
Referenced by MenuEvent(), SortParent(), and TreeEvent()\&.
.SS "void* DTSTreeWindowEvent::data\fC [private]\fP"

.PP
Definition at line 98 of file DTSTreeWindow\&.h\&.
.PP
Referenced by DTSTreeWindowEvent(), SortParent(), TreeCallback(), TreeEvent(), and ~DTSTreeWindowEvent()\&.
.SS "class \fBdtsgui\fP* DTSTreeWindowEvent::dtsgui\fC [private]\fP"

.PP
Definition at line 105 of file DTSTreeWindow\&.h\&.
.PP
Referenced by DTSTreeWindowEvent()\&.
.SS "\fBDTSTreeWindow\fP* DTSTreeWindowEvent::parent\fC [private]\fP"

.PP
Definition at line 100 of file DTSTreeWindow\&.h\&.
.PP
Referenced by DTSTreeWindowEvent(), MenuEvent(), OnButton(), SplitterEvent(), TreeCallback(), and TreeEvent()\&.
.SS "\fBDTSDVMCtrl\fP* DTSTreeWindowEvent::tree\fC [private]\fP"

.PP
Definition at line 102 of file DTSTreeWindow\&.h\&.
.PP
Referenced by DTSTreeWindowEvent(), MenuEvent(), SortParent(), and TreeEvent()\&.
.SS "\fBdtsgui_tree_cb\fP DTSTreeWindowEvent::treecb\fC [private]\fP"

.PP
Definition at line 99 of file DTSTreeWindow\&.h\&.
.PP
Referenced by DTSTreeWindowEvent(), and TreeCallback()\&.
.SS "\fBDTSDVMListView\fP* DTSTreeWindowEvent::vm\fC [private]\fP"

.PP
Definition at line 101 of file DTSTreeWindow\&.h\&.
.PP
Referenced by DTSTreeWindowEvent(), MenuEvent(), SortParent(), and TreeEvent()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for DTS Application wxWidgets GUI Library from the source code\&.
