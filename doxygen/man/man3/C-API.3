.TH "Distrotech GUI Library C API" 3 "Fri Oct 11 2013" "Version 0.00" "DTS Application wxWidgets GUI Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Distrotech GUI Library C API \- 
.PP
Exported functions used for use in C code\&.  

.SS "Modules"

.in +1c
.ti -1c
.RI "\fBMenu bar interface\&.\fP"
.br
.RI "\fICreate and manage menus\&. \fP"
.ti -1c
.RI "\fBDisplay panel interface\&.\fP"
.br
.RI "\fICreate and manage display panels shown in the application display area\&. \fP"
.ti -1c
.RI "\fBUser interface dialogs\&.\fP"
.br
.RI "\fICommon dialogs for user interaction Confirmation, File, Password\&. \fP"
.ti -1c
.RI "\fBWizard Interface\&.\fP"
.br
.RI "\fIMulti panel pop up wizard user interface\&. \fP"
.ti -1c
.RI "\fBProgress dialog interface\&.\fP"
.br
.RI "\fIPopup dialog containing a progress bar and posible cancel button\&. \fP"
.in -1c
.SS "Files"

.in +1c
.ti -1c
.RI "file \fBcxxapi\&.cpp\fP"
.br
.RI "\fIC++ Functions exported to C API\&. \fP"
.ti -1c
.RI "file \fBdtsgui\&.h\fP"
.br
.RI "\fIMain include file for the GUI Library\&. \fP"
.ti -1c
.RI "file \fBwrapper\&.cpp\fP"
.br
.RI "\fIWrapper functions exported to C to allow interfacing with C++\&. \fP"
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBDTS_C_API\fP"
.br
.RI "\fINamespace containing exported functions used by C\&. \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__DTS_C_API\fP"
.br
.RI "\fIDefining __DTS_C_API allows access to C API from inside a C++ file\&. \fP"
.ti -1c
.RI "#define \fB__DTS_C_API\fP"
.br
.RI "\fIDefining __DTS_C_API allows access to C API from inside a C++ file\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_config\fP (\fBdtsgui_configcb\fP confcallback_cb, void *userdata, struct \fBpoint\fP wsize, struct \fBpoint\fP wpos, const char *title, const char *status)"
.br
.RI "\fIConfigure the GUI and create a application frame\&. \fP"
.ti -1c
.RI "int \fBDTS_C_API::dtsgui_run\fP (int argc, char **argv)"
.br
.RI "\fIPass execution to the GUI and activate the frame\&. \fP"
.ti -1c
.RI "void * \fBDTS_C_API::dtsgui_userdata\fP (struct \fBdtsgui\fP *\fBdtsgui\fP)"
.br
.RI "\fIObtain a reference for the application userdata\&. \fP"
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_setwindow\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, \fBdtsgui_pane\fP p)"
.br
.RI "\fISet the displayed panel to pane provided\&. \fP"
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_sendevent\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, int eid)"
.br
.RI "\fIEmit a event handled by event callback's\&. \fP"
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_setuptoolbar\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, \fBdtsgui_toolbar_create\fP cb, void *data)"
.br
.RI "\fISpecify callback to run to create and activate the toolbar\&. \fP"
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_set_toolbar\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, int show)"
.br
.RI "\fIDisable or enable the toolbar\&. \fP"
.ti -1c
.RI "void \fBDTS_C_API::dtsgui_titleappend\fP (struct \fBdtsgui\fP *\fBdtsgui\fP, const char *text)"
.br
.RI "\fIAppend text to the application frame title enclosed in square brackets\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static int \fBDTS_C_API::menuid\fP = wxID_AUTO_LOWEST"
.br
.RI "\fIStatic variable containing menuid incremented each time a menu is created\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Exported functions used for use in C code\&. 

\fBRemarks:\fP
.RS 4
Use of this API is not recomended from inside C++ use the native API\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fB__DTS_C_API\fP 
.PP
\fBDTS_C_API\fP 
.PP
\fBCore API Interface Common to C and C++\fP 
.PP
\fBwrapper\&.cpp\fP 
.PP
\fBcxxapi\&.cpp\fP 
.PP
\fBdtsgui\&.h\fP 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define __DTS_C_API"

.PP
Defining __DTS_C_API allows access to C API from inside a C++ file\&. \fBdtsgui\&.h\fP will only include the definitions for the C API using C++ if this is defined\&. 
.PP
Definition at line 33 of file cxxapi\&.cpp\&.
.SS "#define __DTS_C_API"

.PP
Defining __DTS_C_API allows access to C API from inside a C++ file\&. \fBdtsgui\&.h\fP will only include the definitions for the C API using C++ if this is defined\&. 
.PP
Definition at line 154 of file wrapper\&.cpp\&.
.SH "Function Documentation"
.PP 
.SS "void DTS_C_API::dtsgui_config (\fBdtsgui_configcb\fPconfcallback_cb, void *userdata, struct \fBpoint\fPwsize, struct \fBpoint\fPwpos, const char *title, const char *status)"

.PP
Configure the GUI and create a application frame\&. This is the first process required the application is created and the callback is executed\&.
.PP
Application processing continues until dtsgui_run is executed at this point the call back is executed and proccessing will be passed to the GUI App\&.
.PP
The userdata is returned in the callback\&.
.PP
The Callback must return a non zero value to indicate success should the application fail returning 0 will close the application\&.
.PP
\fBSee Also:\fP
.RS 4
\fBDTSApp\fP 
.PP
\fBdtsgui_configcb\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIconfcallback_cb\fP The callback function where processing will continue\&. 
.br
\fIuserdata\fP a refrenced object passed back to the config callback\&. 
.br
\fIwsize\fP Minimum/Initial size of the application window\&. 
.br
\fIwpos\fP Application position [Top Left Corner] of application placed on screen\&. 
.br
\fItitle\fP Title displayed on the application bar\&. 
.br
\fIstatus\fP Default text displayed on the status bar\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The fuction does not return\&. 
.RE
.PP

.PP
Definition at line 207 of file wrapper\&.cpp\&.
.PP
Referenced by main()\&.
.SS "int DTS_C_API::dtsgui_run (intargc, char **argv)"

.PP
Pass execution to the GUI and activate the frame\&. Pass application processing to the GUI after calling the configure callback\&.
.PP
\fBSee Also:\fP
.RS 4
\fBdtsgui_config\fP 
.PP
\fBDTSApp\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIargc\fP Number of paramaters contained in argv\&. 
.br
\fIargv\fP Array of paramaters to be passed\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return value from callback function\&. 
.RE
.PP

.PP
Definition at line 222 of file wrapper\&.cpp\&.
.PP
Referenced by main()\&.
.SS "void DTS_C_API::dtsgui_sendevent (struct \fBdtsgui\fP *dtsgui, inteid)"

.PP
Emit a event handled by event callback's\&. A event is emited and recived by all active handlers The ID can be determined as required\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDTSFrame::SendDTSEvent()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdtsgui\fP Application data ptr 
.br
\fIeid\fP Event ID to send 
.RE
.PP

.PP
Definition at line 262 of file wrapper\&.cpp\&.
.PP
References dtsgui::GetFrame(), and DTSFrame::SendDTSEvent()\&.
.PP
Referenced by open_config()\&.
.SS "void DTS_C_API::dtsgui_set_toolbar (struct \fBdtsgui\fP *dtsgui, intshow)"

.PP
Disable or enable the toolbar\&. \fBSee Also:\fP
.RS 4
\fBdtsgui::ShowToolbar()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdtsgui\fP Application data ptr\&. 
.br
\fIshow\fP Display the toolbar if non zero\&. 
.RE
.PP

.PP
Definition at line 289 of file wrapper\&.cpp\&.
.PP
References dtsgui::ShowToolbar()\&.
.PP
Referenced by open_config(), and save_config()\&.
.SS "void DTS_C_API::dtsgui_setuptoolbar (struct \fBdtsgui\fP *dtsgui, \fBdtsgui_toolbar_create\fPcb, void *data)"

.PP
Specify callback to run to create and activate the toolbar\&. The toolbar has of yet not been wrapped into the C API Its recomended that a C++ object be linked that contains a derived class of wxToolbar\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBDTSFrame::SetupToolbar\fP 
.RE
.PP
\fBWarning:\fP
.RS 4
This needs to be done in the application configuration callback\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdtsgui\fP Application data ptr\&. 
.br
\fIcb\fP Toolbar create callback\&. 
.br
\fIdata\fP Userdata to be passed to the toolbar 
.RE
.PP

.PP
Definition at line 278 of file wrapper\&.cpp\&.
.PP
References dtsgui::GetFrame(), and DTSFrame::SetupToolbar()\&.
.PP
Referenced by guiconfig_cb()\&.
.SS "void DTS_C_API::dtsgui_setwindow (struct \fBdtsgui\fP *dtsgui, \fBdtsgui_pane\fPp)"

.PP
Set the displayed panel to pane provided\&. Switch the curent pane with the one provided this should not be done and rather use menu callbacks\&.
.PP
\fBSee Also:\fP
.RS 4
\fBDTSFrame::SetWindow()\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdtsgui\fP Application data ptr 
.br
\fIp\fP Panel to display 
.RE
.PP

.PP
Definition at line 249 of file wrapper\&.cpp\&.
.PP
References dtsgui::GetFrame(), and DTSFrame::SetWindow()\&.
.SS "void DTS_C_API::dtsgui_titleappend (struct \fBdtsgui\fP *dtsgui, const char *text)"

.PP
Append text to the application frame title enclosed in square brackets\&. Update the main application title bar text\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBdtsgui::AppendTitle()\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdtsgui\fP Application Data ptr\&. 
.br
\fItext\fP Text to append 
.RE
.PP

.PP
Definition at line 300 of file wrapper\&.cpp\&.
.PP
References dtsgui::AppendTitle()\&.
.PP
Referenced by open_config(), and save_config()\&.
.SS "void* DTS_C_API::dtsgui_userdata (struct \fBdtsgui\fP *dtsgui)"

.PP
Obtain a reference for the application userdata\&. \fBNote:\fP
.RS 4
This reference must be un refferenced\&.
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBdtsgui::GetUserData\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdtsgui\fP Application data ptr\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to application user data 
.RE
.PP

.PP
Definition at line 235 of file wrapper\&.cpp\&.
.PP
References dtsgui::GetUserData()\&.
.PP
Referenced by advanced_config(), app_getxmldoc(), config_menu(), export_config(), file_menu(), newsys_wizard(), open_config(), save_config(), and view_config_conf()\&.
.SH "Variable Documentation"
.PP 
.SS "int DTS_C_API::menuid = wxID_AUTO_LOWEST\fC [static]\fP"

.PP
Static variable containing menuid incremented each time a menu is created\&. 
.PP
Definition at line 181 of file wrapper\&.cpp\&.
.PP
Referenced by DTS_C_API::dtsgui_newmenucb(), and DTS_C_API::dtsgui_newmenuitem()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for DTS Application wxWidgets GUI Library from the source code\&.
